name: Build

on:
  push:
    tags:
      - '*'

defaults:
      run:
        shell: bash

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, macos-11, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.11"
          architecture: x64
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install
      - name: Format code using black
        run: |
          source $VENV
          black .
      - name: Type check code using Mypy
        run: |
          mypy
      - name: Test with pytest
        run: |
          source $VENV
          pytest
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  containerize:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/yarl:latest

  executable:
    needs: test
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            platform-name: windows.x64
          - os: macos-11
            platform-name: macos.x64
          - os: ubuntu-20.04
            platform-name: linux.x64
    env:
      archive-name: yarl-${{ matrix.platform-name }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.11"
          architecture: x64
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.4.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --without dev
      - name: Run PyInstaller
        env:
          PYTHONOPTIMIZE: 1
          PYTHONHASHSEED: 42
        run: |
          source $VENV
          pyinstaller build.spec
      - name: List distribution files
        run: |
          find dist
      # Archive the PyInstaller build using the appropriate tool for the platform.
      - name: Tar files
        if: runner.os != 'Windows'
        run: |
          tar --format=ustar -czvf ${{ env.archive-name }}.tar.gz dist/*/
      - name: Archive files
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive dist/*/ ${{ env.archive-name }}.zip
      - name: "Upload Artifact"
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.archive-name }}.*
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          generateReleaseNotes: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true



