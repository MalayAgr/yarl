{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to YARL - Yet Another RogueLike","text":"<p>Get ready to dive into the dark dungeons and fight terrifying monsters.</p> <p>Use magic spells , throw fireballs  and slay deadly Orcs  as you delve deeper into the  Dungeon of Doom .</p> <p>Be wary of the dark. And tread carefully. </p> <p>Download the game now to get started!</p>"},{"location":"download-install/","title":"Download and Install","text":"Linux Windows MacOS  <p>Note: Requires kernel 5.4 or above, and a 64-bit architecture.</p> <p>Download </p> <ul> <li> <p>Extract the archive:</p> <pre><code>mkdir yarl\ntar -xvzf yarl-linux.x64.tar.gz -C yarl/\n</code></pre> </li> <li> <p>Run the game:</p> <pre><code>./yarl/dist/yarl\n</code></pre> </li> </ul> <p>Alternatively, if you prefer to do things from the command-line, run the following set of commands:</p> <pre><code>wget https://github.com/MalayAgr/yarl/releases/latest/download/yarl-linux.x64.tar.gz\nmkdir yarl\ntar -xvzf yarl-linux.x64.tar.gz -C yarl/\n./yarl/dist/yarl\n</code></pre> <p>Note: Requires Windows 10 or above, and a 64-bit architecture.</p> <p>Download </p> <ul> <li>Unzip the file by right clicking on the downloaded archive and clicking on <code>Extract All</code>. On the window that appears, click <code>Extract</code>.</li> <li>Double click on <code>yarl-windows.x64 &gt; yarl</code> and then run <code>yarl.exe</code>.</li> <li>(Optional) For easier access in the future, you can add <code>yarl.exe</code> to your desktop.</li> </ul> <p>Note: Requires MacOS 11 or above, and a 64-bit architecture.</p> <p>Download </p> <ul> <li> <p>Extract the archive:</p> <pre><code>mkdir yarl\ntar -xvzf yarl-linux.x64.tar.gz -C yarl/\n</code></pre> </li> <li> <p>Run the game:</p> <pre><code>./yarl/dist/yarl\n</code></pre> </li> </ul>"},{"location":"reference/SUMMARY/","title":"Code Reference","text":"<ul> <li>yarl<ul> <li>actions<ul> <li>base_action</li> <li>bump_action</li> <li>consume_item_action</li> <li>consume_targeted_item_action</li> <li>directed_action</li> <li>drop_item_from_inventory_action</li> <li>melee_action</li> <li>movement_action</li> <li>pickup_action</li> <li>take_stairs_action</li> <li>wait_action</li> </ul> </li> <li>components<ul> <li>AI</li> <li>base_component</li> <li>consumables<ul> <li>base_consumable</li> <li>confusion_spell</li> <li>fireball_scroll</li> <li>healing_potion</li> <li>lightning_scroll</li> </ul> </li> <li>equipment</li> <li>equippable</li> <li>fighter</li> <li>inventory</li> <li>level</li> </ul> </li> <li>engine</li> <li>entity</li> <li>event_handlers<ul> <li>ask_user</li> <li>base_event_handler</li> <li>consume_single_item</li> <li>controls</li> <li>event_handler</li> <li>game_over</li> <li>history</li> <li>inventory</li> <li>inventory_drop</li> <li>level_up</li> <li>look</li> <li>main_game</li> <li>main_menu</li> <li>player_info</li> <li>popup_message</li> <li>select_index</li> <li>select_item</li> <li>select_item_to_consume</li> <li>select_item_to_pick_up</li> <li>select_target_area</li> <li>select_target_index</li> </ul> </li> <li>exceptions</li> <li>factories</li> <li>game</li> <li>interface<ul> <li>color</li> <li>message_log</li> <li>renderer</li> </ul> </li> <li>map<ul> <li>gamemap</li> <li>gameworld</li> <li>mapgen</li> </ul> </li> <li>tile_types</li> <li>utils</li> </ul> </li> </ul>"},{"location":"reference/yarl/","title":"Yarl","text":"<p>Parent package.</p>"},{"location":"reference/yarl/engine/","title":"Engine","text":"<p>This module defines the class that is used represent the game engine.</p>"},{"location":"reference/yarl/engine/#yarl.engine.Engine","title":"Engine  <code>class</code>","text":"<pre><code>def __init__(self, game_world, player):\n</code></pre> <p>Class to represent the game engine.</p> <p>The engine is the main interface between actions, event handlers and other parts of the game. It can be used to access things like the player and game map, add messages to be shown on the interface, etc.</p> Attributes Name Type Description <code>player</code> <code>ActiveEntity</code> <p>Game player.</p> <code>game_word</code> <code>GameWorld</code> <p><code>GameWorld</code> instance used for floor generation.</p> <code>game_map</code> <code>GameMap</code> <p>Map of the current floor.</p> <code>message_log</code> <code>MessageLog</code> <p>Internal message log used to show messages on the interface.</p> <code>mouse_location</code> <code>tuple[int, int]</code> <p>Current location of the mouse cursor.</p> Parameters Name Type Description Default <code>game_world</code> <code>GameWorld</code> <p>GameWorld instance used for floor generation.</p> required <code>player</code> <code>ActiveEntity</code> <p>Game player.</p> required"},{"location":"reference/yarl/engine/#yarl.engine.Engine.new_floor","title":"new_floor  <code>method</code>","text":"<pre><code>def new_floor(self):\n</code></pre> <p>Method to generate a new floor.</p> <p>This should be used by other components to generate floors when events happen, for example.</p>"},{"location":"reference/yarl/engine/#yarl.engine.Engine.add_to_message_log","title":"add_to_message_log  <code>method</code>","text":"<pre><code>def add_to_message_log(self, text, fg=COLORS['white1']):\n</code></pre> <p>Method to add a message to be shown on the interface.</p> Parameters Name Type Description Default <code>text</code> <code>str</code> <p>Message to be shown.</p> required <code>fg</code> <code>tuple[int, int, int]</code> <p>Color of the message.</p> <code>COLORS['white1']</code>"},{"location":"reference/yarl/engine/#yarl.engine.Engine.update_fov","title":"update_fov  <code>method</code>","text":"<pre><code>def update_fov(self):\n</code></pre> <p>Method to update the field-of-view (FOV) of the game map based on the player\u2019s position.</p> <p>This should be used by other components to update the FOV when events happen, for example.</p>"},{"location":"reference/yarl/engine/#yarl.engine.Engine.render","title":"render  <code>method</code>","text":"<pre><code>def render(self, console):\n</code></pre> <p>Method to render all game components to the console.</p> <p>This renders the game map, the messages, health bar, level bar and also the names of entities at the current mouse location.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render to.</p> required"},{"location":"reference/yarl/entity/","title":"Entity","text":"<p>This module defines the different types of entities available in the game.</p>"},{"location":"reference/yarl/entity/#yarl.entity.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T', bound='Entity')\n</code></pre> <p>TypeVar to represent subclasses of Entity.</p>"},{"location":"reference/yarl/entity/#yarl.entity.Entity","title":"Entity  <code>class</code>","text":"<pre><code>def __init__(self, x=0, y=0, char='?', color=(255, 255, 255), name='&lt;Unnamed&gt;', *, blocking=False, render_order=RenderOrder.CORPSE):\n</code></pre> <p>Class to represent an entity.</p> Attributes Name Type Description <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>blocking</code> <code>bool</code> <p>Indicates whether the entity is blocking or not. When set to <code>True</code>, other entities cannot walk over it.</p> <code>render_order</code> <code>RenderOrder</code> <p>Priority for rendering the entity.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>0</code> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>0</code> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>'?'</code> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>(255, 255, 255)</code> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>'&lt;Unnamed&gt;'</code> <code>blocking</code> <code>bool</code> <p>Indicates whether the entity is blocking or not. When set to <code>True</code>, other entities cannot walk over it.</p> <code>False</code> <code>render_order</code> <code>RenderOrder</code> <p>Priority for rendering the entity.</p> <code>RenderOrder.CORPSE</code>"},{"location":"reference/yarl/entity/#yarl.entity.Entity.fromentity","title":"fromentity  <code>classmethod</code>","text":"<pre><code>def fromentity(cls, other):\n</code></pre> <p>Method to create an entity from another entity as a copy.</p> Parameters Name Type Description Default <code>other</code> <code>T</code> <p>Entity to copy the entity from.</p> required Returns Type Description <code>T</code> <p>New entity which is exactly the same as <code>other</code>.</p>"},{"location":"reference/yarl/entity/#yarl.entity.Entity.move","title":"move  <code>method</code>","text":"<pre><code>def move(self, dx, dy):\n</code></pre> <p>Method to move the entity by <code>dx</code> amount in the x-direction and <code>dy</code> amount in the y-direction.</p> Parameters Name Type Description Default <code>dx</code> <code>int</code> <p>Amount to move in the x-direction.</p> required <code>dy</code> <code>int</code> <p>Amount to move in the y-direction.</p> required"},{"location":"reference/yarl/entity/#yarl.entity.Entity.place","title":"place  <code>method</code>","text":"<pre><code>def place(self, x, y):\n</code></pre> <p>Method to place the entity at the given location.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required"},{"location":"reference/yarl/entity/#yarl.entity.Entity.distance","title":"distance  <code>method</code>","text":"<pre><code>def distance(self, x, y):\n</code></pre> <p>Method to calculate the Euclidean distance between the entity and the given location.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>float</code> <p>Euclidean distance between <code>(self.x, self.y)</code> and <code>(x, y)</code>.</p>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity","title":"ActiveEntity  <code>class</code>","text":"<pre><code>def __init__(self, fighter, level, x=0, y=0, char='?', color=(255, 255, 255), name='&lt;Unnamed&gt;', ai_cls=None, inventory=None, equipment=None, movement_delay=8):\n</code></pre> <p>         Bases: <code>Entity</code></p> <p>Class to represent an entity which can fight and level up.</p> <p>The entity can optionally have an AI class to control it, an inventory and equipment (armor, weapons).</p> Attributes Name Type Description <code>fighter</code> <code>Fighter</code> <p>Fighter instance responsible for handling attack and damage.</p> <code>level</code> <code>Level</code> <p>Level instance responsible for handling leveling up.</p> <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>ai_cls</code> <code>Type[BaseAI]</code> <p>AI class that should be used for the entity.</p> <code>inventory</code> <code>Inventory | None</code> <p>Optional inventory instance for the entity for inventory capabilities.</p> <code>equipment</code> <code>Equipment | None</code> <p>Optional equipment instance for the entity for equipment capabilities.</p> <code>movement_delay</code> <code>int</code> <p>Movement delay of the entity. After moving once, the entity will wait for <code>movement_delay</code> turns before moving again.</p> <code>movement_wait</code> <code>int</code> <p>Current number of turns the entity needs to wait before making its next move.</p> <code>blocking</code> <code>bool</code> <p>Indicates if this entity is blocking. Always <code>True</code>.</p> <code>render_order</code> <code>RenderOrder</code> <p>Priority for rendering the entity. Always <code>RenderOrder.ACTIVE_ENTITY</code>.</p> Parameters Name Type Description Default <code>fighter</code> <code>Fighter</code> <p>Fighter instance responsible for handling attack and damage.</p> required <code>level</code> <code>Level</code> <p>Level instance responsible for handling leveling up.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>0</code> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>0</code> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>'?'</code> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>(255, 255, 255)</code> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>'&lt;Unnamed&gt;'</code> <code>ai_cls</code> <code>Type[BaseAI] | None</code> <p>Optional AI class that should be used to control the entity.</p> <code>None</code> <code>inventory</code> <code>Inventory | None</code> <p>Optional inventory instance for the entity for inventory capabilities.</p> <code>None</code> <code>equipment</code> <code>Equipment | None</code> <p>Optional equipment instance for the entity for equipment capabilities.</p> <code>None</code> <code>movement_delay</code> <code>int</code> <p>Movement delay of the entity. After moving once, the entity will wait for <code>movement_delay</code> turns before moving again.</p> <code>8</code>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Indicates whether the entity is alive or not.</p>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity.ai","title":"ai  <code>writable</code> <code>property</code>","text":"<pre><code>ai: BaseAI | None\n</code></pre> <p>Instance of <code>ai_cls</code> associated with the entity.</p> <p>This is initially <code>None</code> and initialized either when the entity is controlled for the first time via the AI or when the property is explicitly set via its setter.</p>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity.is_waiting_to_move","title":"is_waiting_to_move  <code>property</code>","text":"<pre><code>is_waiting_to_move: bool\n</code></pre> <p>Indicates whether the entity is waiting to move at the moment.</p> <p>Checking this also reduces the number of turns the entity has to wait by 1.</p>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity.move","title":"move  <code>method</code>","text":"<pre><code>def move(self, dx, dy):\n</code></pre> <p>See <code>Entity.move()</code>.</p> <p>The method also resets <code>self.movement_wait</code> to <code>self.movement_delay</code> so that <code>self.is_waiting_to_move</code> becomes <code>True</code>.</p>"},{"location":"reference/yarl/entity/#yarl.entity.ActiveEntity.place","title":"place  <code>method</code>","text":"<pre><code>def place(self, x, y):\n</code></pre> <p>See <code>Entity.place()</code>.</p> <p>The method also resets <code>self.movement_wait</code> to <code>self.movement_delay</code> so that <code>self.is_waiting_to_move</code> becomes <code>True</code>.</p>"},{"location":"reference/yarl/entity/#yarl.entity.Item","title":"Item  <code>class</code>","text":"<pre><code>def __init__(self, consumable=None, equippable=None, x=0, y=0, char='?', color=(255, 255, 255), name='&lt;Unnamed&gt;'):\n</code></pre> <p>         Bases: <code>Entity</code></p> <p>Class to represent a consumable and/or equippable item.</p> Attributes Name Type Description <code>consumable</code> <code>Consumable</code> <p>Optional Consumable instance to handle item consumption.</p> <code>equippable</code> <code>Equippable</code> <p>Optional Equippable instance to handle item equipment.</p> <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>blocking</code> <code>bool</code> <p>Indicates if this entity is blocking. Always <code>False</code>.</p> <code>render_order</code> <code>RenderOrder</code> <p>Priority for rendering the entity. Always <code>RenderOrder.ITEM</code>.</p> Parameters Name Type Description Default <code>consumable</code> <code>Consumable | None</code> <p>Optional Consumable instance to handle item consumption.</p> <code>None</code> <code>equippable</code> <code>Equippable | None</code> <p>Optional Equippable instance to handle item equipment.</p> <code>None</code> <code>x</code> <code>int</code> <p>x-coordinate of the current location of the entity.</p> <code>0</code> <code>y</code> <code>int</code> <p>y-coordinate of the current location of the entity.</p> <code>0</code> <code>char</code> <code>str</code> <p>Character used to represent the entity.</p> <code>'?'</code> <code>color</code> <code>tuple[int, int, int]</code> <p>Color used to represent the entity.</p> <code>(255, 255, 255)</code> <code>name</code> <code>str</code> <p>Name of the entity.</p> <code>'&lt;Unnamed&gt;'</code>"},{"location":"reference/yarl/exceptions/","title":"Exceptions","text":"<p>This module defines exceptions used throughout the game.</p>"},{"location":"reference/yarl/exceptions/#yarl.exceptions.CollisionWithEntityException","title":"CollisionWithEntityException  <code>class</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Entity is being added to a location where there is a blocking entity.</p>"},{"location":"reference/yarl/exceptions/#yarl.exceptions.ImpossibleActionException","title":"ImpossibleActionException  <code>class</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Action being performed is not possible.</p>"},{"location":"reference/yarl/exceptions/#yarl.exceptions.QuitWithoutSavingException","title":"QuitWithoutSavingException  <code>class</code>","text":"<p>         Bases: <code>SystemExit</code></p> <p>The game is quit without saving.</p>"},{"location":"reference/yarl/factories/","title":"Factories","text":"<p>This module defines some constants and functions that can be used to obtain entities.</p>"},{"location":"reference/yarl/factories/#yarl.factories.ENEMIES","title":"ENEMIES  <code>module-attribute</code>","text":"<pre><code>ENEMIES = {'orc': ActiveEntity(fighter=Fighter(max_hp=10, base_defense=1, base_power=3, attack_delay=10), level=Level(xp_given=35), char='O', color=(63, 127, 63), name='Orc', ai_cls=AttackingAI), 'troll': ActiveEntity(fighter=Fighter(max_hp=16, base_defense=3, base_power=10, attack_delay=10), level=Level(xp_given=200), char='T', color=(0, 127, 0), name='Troll', ai_cls=AttackingAI)}\n</code></pre> <p>Dictionary of pre-defined enemies.</p>"},{"location":"reference/yarl/factories/#yarl.factories.CONSUMABLE_ITEMS","title":"CONSUMABLE_ITEMS  <code>module-attribute</code>","text":"<pre><code>CONSUMABLE_ITEMS = {'healing_potion': Item(consumable=HealingPotion(amount=4), char='!', color=(127, 0, 255), name='Healing Potion'), 'lightning_scroll': Item(consumable=LightningScroll(power=20, range=5), char='~', color=(255, 255, 0), name='Lightning Scroll'), 'confusion_spell': Item(consumable=ConfusionSpell(number_of_turns=10), char='~', color=(207, 63, 255), name='Confusion Spell'), 'fireball_scroll': Item(consumable=FireballScroll(power=12, radius=3), char='~', color=(255, 0, 0), name='Fireball Scroll')}\n</code></pre> <p>Dictionary of pre-defined consumable items.</p>"},{"location":"reference/yarl/factories/#yarl.factories.EQUIPPABLE_ITEMS","title":"EQUIPPABLE_ITEMS  <code>module-attribute</code>","text":"<pre><code>EQUIPPABLE_ITEMS = {'dagger': Item(equippable=Equippable(power_bonus=2, equipment_type=EquipmentType.WEAPON), char='/', color=(0, 191, 255), name='Dagger'), 'sword': Item(equippable=Equippable(power_bonus=4, equipment_type=EquipmentType.WEAPON), char='/', color=(0, 191, 255), name='Sword'), 'leather_armor': Item(equippable=Equippable(defense_bonus=1, equipment_type=EquipmentType.ARMOR), char='[', color=(139, 69, 19), name='Leather Armor'), 'steel_armor': Item(equippable=Equippable(defense_bonus=3, equipment_type=EquipmentType.ARMOR), char='[', color=(139, 69, 19), name='Steel Armor')}\n</code></pre> <p>Dictionary of pre-defined equippable items.</p>"},{"location":"reference/yarl/factories/#yarl.factories.ENEMY_FACTORY","title":"ENEMY_FACTORY  <code>module-attribute</code>","text":"<pre><code>ENEMY_FACTORY = {ENEMIES['orc']: 0.8, ENEMIES['troll']: 0.2}\n</code></pre> <p>Default probability distribution used to place enemies in rooms.</p>"},{"location":"reference/yarl/factories/#yarl.factories.ITEM_FACTORY","title":"ITEM_FACTORY  <code>module-attribute</code>","text":"<pre><code>ITEM_FACTORY: dict[Item, float] = {CONSUMABLE_ITEMS['healing_potion']: 0.4, CONSUMABLE_ITEMS['lightning_scroll']: 0.1, CONSUMABLE_ITEMS['confusion_spell']: 0.3, CONSUMABLE_ITEMS['fireball_scroll']: 0.2, EQUIPPABLE_ITEMS['dagger']: 0.3, EQUIPPABLE_ITEMS['sword']: 0.2, EQUIPPABLE_ITEMS['leather_armor']: 0.1, EQUIPPABLE_ITEMS['steel_armor']: 0.1}\n</code></pre> <p>Default probability distribution used to place items in rooms.</p>"},{"location":"reference/yarl/factories/#yarl.factories.player_factory","title":"player_factory  <code>function</code>","text":"<pre><code>def player_factory(max_hp, base_defense, base_power, movement_delay=0, attack_delay=0, inventory_capacity=26):\n</code></pre> <p>Function to create a player.</p> <p><code>name</code> of the player will be set to <code>\"Player\"</code> and <code>char</code> will be set to <code>\"@\"</code>.</p> Parameters Name Type Description Default <code>max_hp</code> <code>int</code> <p>Maximum health of the player.</p> required <code>base_defense</code> <code>int</code> <p>Base defense of the player.</p> required <code>base_power</code> <code>int</code> <p>Base power of the player.</p> required <code>movement_delay</code> <code>int</code> <p>Movement delay for the player.</p> <code>0</code> <code>attack_delay</code> <code>int</code> <p>Attack delay for the player.</p> <code>0</code> <code>inventory_capacity</code> <code>int</code> <p>Capacity of player\u2019s inventory.</p> <code>26</code> Returns Type Description <code>ActiveEntity</code> <p>Created player.</p>"},{"location":"reference/yarl/game/","title":"Game","text":"<p>This module defines the class which is used to initialize a game and run the game loop.</p>"},{"location":"reference/yarl/game/#yarl.game.Game","title":"Game  <code>class</code>","text":"<pre><code>def __init__(self, map_width, map_height, room_min_size=5, player_max_hp=30, player_defense=2, player_power=5, player_movement_delay=0, player_attack_delay=8, player_inventory_capacity=26):\n</code></pre> <p>Class to represent a game.</p> Attributes Name Type Description <code>map_width</code> <code>int</code> <p>Width of the game map.</p> <code>map_height</code> <code>int</code> <p>Height of the game map.</p> <code>room_min_size</code> <code>int</code> <p>Minimum size of each room in the game map.</p> <code>player_max_hp</code> <code>int</code> <p>Initial maximum HP of the player.</p> <code>player_defense</code> <code>int</code> <p>Initial defense of the player.</p> <code>player_power</code> <code>int</code> <p>Initial power of the player.</p> <code>player_movement_delay</code> <code>int</code> <p>Movement delay for the player.</p> <code>player_attack_delay</code> <code>int</code> <p>Attack delay for the player.</p> <code>player_inventory_capacity</code> <code>int</code> <p>Inventory capacity of the player.</p> Parameters Name Type Description Default <code>map_width</code> <code>int</code> <p>Width of the game map.</p> required <code>map_height</code> <code>int</code> <p>Height of the game map.</p> required <code>room_min_size</code> <code>int</code> <p>Minimum size of each room in the game map.</p> <code>5</code> <code>player_max_hp</code> <code>int</code> <p>Initial maximum HP of the player.</p> <code>30</code> <code>player_defense</code> <code>int</code> <p>Initial defense of the player.</p> <code>2</code> <code>player_power</code> <code>int</code> <p>Initial power of the player.</p> <code>5</code> <code>player_movement_delay</code> <code>int</code> <p>Movement delay for the player.</p> <code>0</code> <code>player_attack_delay</code> <code>int</code> <p>Attack delay for the player.</p> <code>8</code> <code>player_inventory_capacity</code> <code>int</code> <p>Inventory capacity of the player.</p> <code>26</code>"},{"location":"reference/yarl/game/#yarl.game.Game.fromdict","title":"fromdict  <code>classmethod</code>","text":"<pre><code>def fromdict(cls, params):\n</code></pre> <p>Method to create a game from a dictionary.</p> Parameters Name Type Description Default <code>params</code> <code>dict[str, int]</code> <p>Parameters for initialization. It must have the keys <code>map_width</code> and <code>map_height</code>. All other parameters are optional.</p> required"},{"location":"reference/yarl/game/#yarl.game.Game.get_engine","title":"get_engine  <code>method</code>","text":"<pre><code>def get_engine(self):\n</code></pre> <p>Method to initialize an Engine instance that can be used for the game.</p> <p>It creates the ActiveEntity instance that will be the player, creates the GameWorld instance that will be used for floor generation, and then creates the engine with the player and the game world.</p> Returns Type Description <code>Engine</code> <p>Engine that can be used for the game.</p>"},{"location":"reference/yarl/game/#yarl.game.Game.run","title":"run  <code>method</code>","text":"<pre><code>def run(self, console, context, main_menu_background_path=''):\n</code></pre> <p>Game loop.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console that will be used throughout the loop for rendering.</p> required <code>context</code> <code>Context</code> <p>Context that will be used throughout the loop.</p> required <code>main_menu_background_path</code> <code>str</code> <p>Optional path to the image that should be used as the background of the main menu.</p> <code>''</code>"},{"location":"reference/yarl/tile_types/","title":"Tile types","text":""},{"location":"reference/yarl/utils/","title":"Utils","text":"<p>This module defines some utilities that are used throughout the game.</p>"},{"location":"reference/yarl/utils/#yarl.utils.RenderOrder","title":"RenderOrder  <code>class</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Priorities for rendering entities.</p> <p>Entities with priority <code>CORPSE</code> will be rendered first and those with priority <code>ACTIVE_ENTITY</code> will be rendered last.</p> <p>This ensures that entities with <code>ACTIVE_ENTITY</code> priority are rendered on top of entities with <code>ITEM</code> priority, those with <code>ITEM</code> priority are rendered on top of entities with <code>CORPSE</code> priority and so on.</p>"},{"location":"reference/yarl/utils/#yarl.utils.RenderOrder.CORPSE","title":"CORPSE  <code>class-attribute</code>","text":"<pre><code>CORPSE = auto()\n</code></pre> <p>Highest priority.</p>"},{"location":"reference/yarl/utils/#yarl.utils.RenderOrder.ITEM","title":"ITEM  <code>class-attribute</code>","text":"<pre><code>ITEM = auto()\n</code></pre> <p>Highest priority after <code>CORPSE</code>.</p>"},{"location":"reference/yarl/utils/#yarl.utils.RenderOrder.ACTIVE_ENTITY","title":"ACTIVE_ENTITY  <code>class-attribute</code>","text":"<pre><code>ACTIVE_ENTITY = auto()\n</code></pre> <p>Highest priority after <code>ITEM</code>.</p>"},{"location":"reference/yarl/utils/#yarl.utils.EquipmentType","title":"EquipmentType  <code>class</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Valid equipment types.</p>"},{"location":"reference/yarl/utils/#yarl.utils.EquipmentType.WEAPON","title":"WEAPON  <code>class-attribute</code>","text":"<pre><code>WEAPON = 'weapon'\n</code></pre> <p>Equippable that can be used as a weapon.</p>"},{"location":"reference/yarl/utils/#yarl.utils.EquipmentType.ARMOR","title":"ARMOR  <code>class-attribute</code>","text":"<pre><code>ARMOR = 'armor'\n</code></pre> <p>Equippable that can be used as armor.</p>"},{"location":"reference/yarl/utils/#yarl.utils.get_game_save_path","title":"get_game_save_path  <code>function</code>","text":"<pre><code>def get_game_save_path():\n</code></pre> <p>Function to get the absolute path of the directory where a game should be saved.</p> Returns Type Description <code>str</code> <p>Absolute path to the saved games directory.</p>"},{"location":"reference/yarl/utils/#yarl.utils.save_game","title":"save_game  <code>function</code>","text":"<pre><code>def save_game(engine):\n</code></pre> <p>Function to save the game.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine that represents the game.</p> required"},{"location":"reference/yarl/utils/#yarl.utils.load_game","title":"load_game  <code>function</code>","text":"<pre><code>def load_game():\n</code></pre> <p>Function to load a saved game.</p> Returns Type Description <code>Engine</code> <p>Engine that represents the loaded game.</p>"},{"location":"reference/yarl/utils/#yarl.utils.clear_game","title":"clear_game  <code>function</code>","text":"<pre><code>def clear_game():\n</code></pre> <p>Function to remove a saved game.</p>"},{"location":"reference/yarl/actions/","title":"Actions","text":"<p>This package defines actions that can be used as an interface between components and event handlers.</p> <p>For example, <code>PickupAction</code> can be used by an event handler to trigger picking up an item and adding it to an entity\u2019s inventory.</p> <p>Similarly, <code>TakeStairsAction</code> can be used by an event handler to trigger the generation of a new floor in the game.</p>"},{"location":"reference/yarl/actions/base_action/","title":"Base action","text":""},{"location":"reference/yarl/actions/base_action/#yarl.actions.base_action.Action","title":"Action  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity):\n</code></pre> <p>Base class for actions.</p> <p>Each action belongs to an entity called the invoking entity. Thus, an action is short-lived and dies as soon as it has been performed.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>Entity</code> <p>Entity that invoked this action.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>Entity</code> <p>Entity that invoked this action.</p> required"},{"location":"reference/yarl/actions/base_action/#yarl.actions.base_action.Action.game_map","title":"game_map  <code>property</code>","text":"<pre><code>game_map: GameMap\n</code></pre> <p>Current game map.</p>"},{"location":"reference/yarl/actions/base_action/#yarl.actions.base_action.Action.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method that implements how the action should be performed.</p> <p>Subclasses must implement this method accordingly.</p> <p>By default, it raises <code>NotImplementedError</code>.</p>"},{"location":"reference/yarl/actions/bump_action/","title":"Bump action","text":""},{"location":"reference/yarl/actions/bump_action/#yarl.actions.bump_action.BumpAction","title":"BumpAction  <code>class</code>","text":"<p>         Bases: <code>DirectedAction</code></p> <p>Action which either attacks the target at the destination associated with the action or if there is no target, moves the invoking entity to the destination.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>dx</code> <code>int</code> <p>Deviation in the x-direction from the invoking entity\u2019s current location.</p> <code>dy</code> <code>int</code> <p>Deviation in the y-direction from the invoking entity\u2019s current location.</p>"},{"location":"reference/yarl/actions/bump_action/#yarl.actions.bump_action.BumpAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method which either attacks the target or moves the invoking entity.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If there is no target and moving the invoking entity to the destination is not possible.</p>"},{"location":"reference/yarl/actions/consume_item_action/","title":"Consume item action","text":""},{"location":"reference/yarl/actions/consume_item_action/#yarl.actions.consume_item_action.ConsumeItemAction","title":"ConsumeItemAction  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, item=None):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Action which handles consuming an un-targeted item if it is consumable with the invoking entity as the consumer.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>item</code> <code>Item | None</code> <p>Item to consume.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> required <code>item</code> <code>Item | None</code> <p>Item to consume.</p> <code>None</code>"},{"location":"reference/yarl/actions/consume_item_action/#yarl.actions.consume_item_action.ConsumeItemAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to consume the item with the invoking entity as the consumer.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If <code>self.item</code> is <code>None</code> or <code>item.consumable</code> is <code>None</code>.</p>"},{"location":"reference/yarl/actions/consume_targeted_item_action/","title":"Consume targeted item action","text":""},{"location":"reference/yarl/actions/consume_targeted_item_action/#yarl.actions.consume_targeted_item_action.ConsumeTargetedItemAction","title":"ConsumeTargetedItemAction  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, target_location, item=None):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Action which handles consuming an targeted item if it is consumable with the invoking entity as the consumer.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>target_location</code> <code>tuple[int, int]</code> <p>Location of the target.</p> <code>item</code> <code>Item | None</code> <p>Item to consume.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> required <code>target_location</code> <code>tuple[int, int]</code> <p>Location of the target.</p> required <code>item</code> <code>Item | None</code> <p>Item to consume.</p> <code>None</code>"},{"location":"reference/yarl/actions/consume_targeted_item_action/#yarl.actions.consume_targeted_item_action.ConsumeTargetedItemAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to consume the item with the invoking entity as the consumer.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If <code>self.item</code> is <code>None</code> or <code>item.consumable</code> is <code>None</code>.</p>"},{"location":"reference/yarl/actions/directed_action/","title":"Directed action","text":""},{"location":"reference/yarl/actions/directed_action/#yarl.actions.directed_action.DirectedAction","title":"DirectedAction  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, dx, dy):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Base class for actions that are associated with a destination defined as the deviation from the invoking entity\u2019s current location.</p> <p>The action expects to be invoked by an instance of <code>ActiveEntity</code>.</p> <p>The action itself does not do anything and must be extended by subclasses.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>dx</code> <code>int</code> <p>Deviation in the x-direction from the invoking entity\u2019s current location.</p> <code>dy</code> <code>int</code> <p>Deviation in the y-direction from the invoking entity\u2019s current location.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> required <code>dx</code> <code>int</code> <p>Deviation in the x-direction from the invoking entity\u2019s current location.</p> required <code>dy</code> <code>int</code> <p>Deviation in the y-direction from the invoking entity\u2019s current location.</p> required"},{"location":"reference/yarl/actions/directed_action/#yarl.actions.directed_action.DirectedAction.destination","title":"destination  <code>property</code>","text":"<pre><code>destination: tuple[int, int]\n</code></pre> <p>Destination associated with the action.</p> <p>Calculated as <code>self.entity.x + self.dx</code>, <code>self.entity.y + self.dy</code>.</p>"},{"location":"reference/yarl/actions/directed_action/#yarl.actions.directed_action.DirectedAction.blocking_entity","title":"blocking_entity  <code>property</code>","text":"<pre><code>blocking_entity: Entity | None\n</code></pre> <p>Blocking entity at the destination associated with the action.</p>"},{"location":"reference/yarl/actions/drop_item_from_inventory_action/","title":"Drop item from inventory action","text":""},{"location":"reference/yarl/actions/drop_item_from_inventory_action/#yarl.actions.drop_item_from_inventory_action.DropItemFromInventoryAction","title":"DropItemFromInventoryAction  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, items=None):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Action to handle removing items from the invoking entity\u2019s inventory, if it is present.</p> <p>It also handles unequipping an equipped item that has been dropped if the invoking entity has equipment associated with it.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>items</code> <code>list[Item]</code> <p>Items to drop up from the inventory.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> required <code>items</code> <code>list[Item] | None</code> <p>Items to drop up from the inventory.</p> <code>None</code>"},{"location":"reference/yarl/actions/drop_item_from_inventory_action/#yarl.actions.drop_item_from_inventory_action.DropItemFromInventoryAction.place_item","title":"place_item  <code>method</code>","text":"<pre><code>def place_item(self, item, x, y):\n</code></pre> <p>Method to place an item at the given location on the game map.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to place.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location to place the item at.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location to place the item at.</p> required"},{"location":"reference/yarl/actions/drop_item_from_inventory_action/#yarl.actions.drop_item_from_inventory_action.DropItemFromInventoryAction.handle_unequip","title":"handle_unequip  <code>method</code>","text":"<pre><code>def handle_unequip(self, item):\n</code></pre> <p>Method to handle unequipping an  item if the invoking entity has equipment associated with it.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to unequip.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if the item was unequipped, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/actions/drop_item_from_inventory_action/#yarl.actions.drop_item_from_inventory_action.DropItemFromInventoryAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to drop one or more items from inventory and add them back to the game map..</p> Raises Type Description <code>ImpossibleActionException</code> <p>If <code>self.items</code> is empty, the invoking entity has no inventory or an item from <code>self.items</code> is not part of the inventory.</p>"},{"location":"reference/yarl/actions/melee_action/","title":"Melee action","text":""},{"location":"reference/yarl/actions/melee_action/#yarl.actions.melee_action.MeleeAction","title":"MeleeAction  <code>class</code>","text":"<p>         Bases: <code>DirectedAction</code></p> <p>Action that performs a single attack on the entity that is at the destination associated with the action.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>dx</code> <code>int</code> <p>Deviation in the x-direction from the invoking entity\u2019s current location.</p> <code>dy</code> <code>int</code> <p>Deviation in the y-direction from the invoking entity\u2019s current location.</p>"},{"location":"reference/yarl/actions/melee_action/#yarl.actions.melee_action.MeleeAction.target","title":"target  <code>property</code>","text":"<pre><code>target: ActiveEntity | None\n</code></pre> <p>Target entity at the destination associated with the action.</p>"},{"location":"reference/yarl/actions/melee_action/#yarl.actions.melee_action.MeleeAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to attack the target at the destination associated with the action via the invoking entity\u2019s <code>fighter</code> instance.</p>"},{"location":"reference/yarl/actions/movement_action/","title":"Movement action","text":""},{"location":"reference/yarl/actions/movement_action/#yarl.actions.movement_action.MovementAction","title":"MovementAction  <code>class</code>","text":"<p>         Bases: <code>DirectedAction</code></p> <p>Action that moves the invoking entity to the destination associated with the action.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>dx</code> <code>int</code> <p>Deviation in the x-direction from the invoking entity\u2019s current location.</p> <code>dy</code> <code>int</code> <p>Deviation in the y-direction from the invoking entity\u2019s current location.</p>"},{"location":"reference/yarl/actions/movement_action/#yarl.actions.movement_action.MovementAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to move the invoking entity to the destination associated with the action.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If the destination is blocked in some way.</p>"},{"location":"reference/yarl/actions/pickup_action/","title":"Pickup action","text":""},{"location":"reference/yarl/actions/pickup_action/#yarl.actions.pickup_action.PickupAction","title":"PickupAction  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, items=None):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Action to handle picking up of one or more items from the game map and adding them to the invoking entity\u2019s inventory, if any.</p> <p>It also handles equipping an equippable item if the invoking entity has equipment associated with it.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> <code>items</code> <code>list[Item]</code> <p>Items to pick up and add to inventory.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity that invoked this action.</p> required <code>items</code> <code>list[Item] | None</code> <p>Items to pick up and add to inventory.</p> <code>None</code>"},{"location":"reference/yarl/actions/pickup_action/#yarl.actions.pickup_action.PickupAction.handle_equip","title":"handle_equip  <code>method</code>","text":"<pre><code>def handle_equip(self, item):\n</code></pre> <p>Method to handle equipping an equippable item if the invoking entity has equipment associated with it.</p> <p>It also handles showing appropriate messages if there was some other item in the equipment slot <code>item</code> belongs to.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item the action should try to equip.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if the item was equipped, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/actions/pickup_action/#yarl.actions.pickup_action.PickupAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to pick up one or more items from the game map and add them to the invoking entity\u2019s inventory.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If <code>self.items</code> is empty, the invoking entity has no inventory or the inventory has reached capacity.</p>"},{"location":"reference/yarl/actions/take_stairs_action/","title":"Take stairs action","text":""},{"location":"reference/yarl/actions/take_stairs_action/#yarl.actions.take_stairs_action.TakeStairsAction","title":"TakeStairsAction  <code>class</code>","text":"<p>         Bases: <code>Action</code></p> <p>Action which generates a new floor in the game world if the invoking entity uses a stair tile.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>Entity</code> <p>Entity that invoked this action.</p>"},{"location":"reference/yarl/actions/take_stairs_action/#yarl.actions.take_stairs_action.TakeStairsAction.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method to generate a new floor in the game world.</p> Raises Type Description <code>ImpossibleActionException</code> <p>If the invoking entity is not on a stair tile.</p>"},{"location":"reference/yarl/actions/wait_action/","title":"Wait action","text":""},{"location":"reference/yarl/actions/wait_action/#yarl.actions.wait_action.WaitAction","title":"WaitAction  <code>class</code>","text":"<p>         Bases: <code>Action</code></p> <p>Action which does nothing. Can be used as a noop action.</p>"},{"location":"reference/yarl/components/","title":"Components","text":"<p>This package provides composable components that can be passed to entities to add capabilities.</p> <p>For example, for combat capabilities, the <code>Fighter</code> component can be used and to enable AI controlling, a subclass of <code>BaseAI</code> can be used.</p>"},{"location":"reference/yarl/components/AI/","title":"AI","text":""},{"location":"reference/yarl/components/AI/#yarl.components.AI.BaseAI","title":"BaseAI  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity):\n</code></pre> <p>         Bases: <code>Action</code></p> <p>Base AI class for all AIs.</p> <p>Subclasses should inherit from this method to introduce new AIs that can be used to control enemies.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> required"},{"location":"reference/yarl/components/AI/#yarl.components.AI.BaseAI.get_path_to","title":"get_path_to  <code>method</code>","text":"<pre><code>def get_path_to(self, dest_x, dest_y):\n</code></pre> <p>Method to get an A* path from the invoking entity\u2019s current location to <code>(dest_x, dest_y)</code>.</p> Parameters Name Type Description Default <code>dest_x</code> <code>int</code> <p>x-coordinate of the target location.</p> required <code>dest_y</code> <code>int</code> <p>y-coordinate of the target location.</p> required Returns Type Description <code>deque[tuple[int, int]]</code> <p>Path to <code>(dest_x, dest_y)</code>.</p>"},{"location":"reference/yarl/components/AI/#yarl.components.AI.AttackingAI","title":"AttackingAI  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity):\n</code></pre> <p>         Bases: <code>BaseAI</code></p> <p>AI with attacking and movement abilities.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> <code>path</code> <code>deque[tuple[int, int]]</code> <p>Path to the player.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> required"},{"location":"reference/yarl/components/AI/#yarl.components.AI.AttackingAI.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method which performs the AI behavior for the invoking entity.</p> <p>It essentially attacks the player if the entity is close enough or moves towards the player via the A* path.</p>"},{"location":"reference/yarl/components/AI/#yarl.components.AI.ConfusionAI","title":"ConfusionAI  <code>class</code>","text":"<pre><code>def __init__(self, engine, entity, turns_remaining, previous_ai):\n</code></pre> <p>         Bases: <code>BaseAI</code></p> <p>AI which mimics a confused entity.</p> <p>The entity controlled by this AI starts moving randomly and can attack other entities, including enemies.</p> Attributes Name Type Description <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> <code>turns_remaining</code> <code>int</code> <p>Number of turns remaining before the AI\u2019s effect has worn off.</p> <code>previous_ai</code> <code>BaseAI | None</code> <p>AI that was previously controlling the invoking entity. The AI has the ability to switch to this AI once its effect has worn off.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>entity</code> <code>ActiveEntity</code> <p>Entity which invoked this action.</p> required <code>turns_remaining</code> <code>int</code> <p>Number of turns remaining before the AI\u2019s effect has worn off.</p> required <code>previous_ai</code> <code>BaseAI | None</code> <p>AI that was previously controlling the invoking entity. The AI has the ability to switch to this AI once its effect has worn off.</p> required"},{"location":"reference/yarl/components/AI/#yarl.components.AI.ConfusionAI.DIRECTIONS","title":"DIRECTIONS  <code>class-attribute</code>","text":"<pre><code>DIRECTIONS: list[tuple[int, int]] = [(0, -1), (1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1)]\n</code></pre> <p>Deviations for the eight neighbors of a cell.</p>"},{"location":"reference/yarl/components/AI/#yarl.components.AI.ConfusionAI.perform","title":"perform  <code>method</code>","text":"<pre><code>def perform(self):\n</code></pre> <p>Method which performs the AI behavior for the invoking entity.</p> <p>If the effect is still active, the AI randomly selects one of the eight neighbors of the cell where the invoking entity is currently located at, and either attacks the entity at the resultant cell or moves to that cell.</p>"},{"location":"reference/yarl/components/base_component/","title":"Base component","text":""},{"location":"reference/yarl/components/base_component/#yarl.components.base_component.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre> <p>TypeVar to represent the generic type.</p>"},{"location":"reference/yarl/components/base_component/#yarl.components.base_component.Component","title":"Component  <code>class</code>","text":"<pre><code>def __init__(self, owner=None):\n</code></pre> <p>         Bases: <code>Generic[T]</code></p> <p>Generic class to represent a component with an owner.</p> <p>An owner is essentially another object of some class that is going to use this component via composition.</p> <p>To define a new component, inherit from Component with a specific type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from yarl.components import Component\n&gt;&gt;&gt; from yarl.entity import Item\n&gt;&gt;&gt; class Foo(Component[Item]):\n...     pass\n...\n</code></pre> <p>The component <code>Foo</code> now expects an object of class <code>Item</code> or of its subclasses as the owner.</p> <p>Any object that uses the component via composition must set the owner attribute of the component to itself.</p> <pre><code>&gt;&gt;&gt; from yarl.components import Foo\n&gt;&gt;&gt; class SomeItem(Item):\n...     def __init__(self, foo: Foo):\n...         self.foo = foo\n...         self.foo.owner = self\n...     def __repr__(self):\n...         return f\"{self.__class__.__name__}()\"\n...\n&gt;&gt;&gt; foo = Foo()\n&gt;&gt;&gt; obj = SomeItem(foo=foo)\n&gt;&gt;&gt; foo.owner\nSomeItem()\n</code></pre> Parameters Name Type Description Default <code>owner</code> <code>T | None</code> <p>Owner of the component.</p> <code>None</code>"},{"location":"reference/yarl/components/base_component/#yarl.components.base_component.Component.owner","title":"owner  <code>writable</code> <code>property</code>","text":"<pre><code>owner: T | None\n</code></pre> <p>Owner of the component.</p>"},{"location":"reference/yarl/components/equipment/","title":"Equipment","text":""},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Bonus","title":"Bonus  <code>class</code>","text":"<p>Dataclass to represent a bonus.</p> Attributes Name Type Description <code>defense_bonus</code> <code>int</code> <p>Defense bonus.</p> <code>power_bonus</code> <code>int</code> <p>Power bonus.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment","title":"Equipment  <code>class</code>","text":"<pre><code>def __init__(self, weapon=None, armor=None, owner=None):\n</code></pre> <p>         Bases: <code>Component[ActiveEntity]</code></p> <p>Component which adds equipment abilities.</p> <p>It expects an instance of <code>ActiveEntity</code> as the owner.</p> Attributes Name Type Description <code>weapon</code> <code>Item | None</code> <p>Item currently equipped in the weapon slot. At a time, only one item can occupy the slot.</p> <code>armor</code> <code>Item | None</code> <p>Item currently equipped in the armor slot. At the time, only one item can occupy the slot.</p> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns the equipment.</p> Parameters Name Type Description Default <code>weapon</code> <code>Item | None</code> <p>Item in the weapon slot.</p> <code>None</code> <code>armor</code> <code>Item | None</code> <p>Item in the armor slot.</p> <code>None</code> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns the equipment.</p> <code>None</code> Raises Type Description <code>ValueError</code> <p>When <code>weapon</code> or <code>armor</code> is not <code>None</code>, and <code>weapon.equippable</code> or <code>armor.equippable</code> is <code>None</code>.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.weapon_bonuses","title":"weapon_bonuses  <code>property</code>","text":"<pre><code>weapon_bonuses: Bonus\n</code></pre> <p>Bonus instance representing the defense and power bonuses granted by the item in the weapon slot.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.armor_bonuses","title":"armor_bonuses  <code>property</code>","text":"<pre><code>armor_bonuses: Bonus\n</code></pre> <p>Bonus instance representing the defense and power bonuses granted by the item in the armor slot.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.power_bonus","title":"power_bonus  <code>property</code>","text":"<pre><code>power_bonus: int\n</code></pre> <p>Total power bonus granted by the items in the weapon and armor slots.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.defense_bonus","title":"defense_bonus  <code>property</code>","text":"<pre><code>defense_bonus: int\n</code></pre> <p>Total defense bonus granted by the items in the weapon and armor slots.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.equip_message","title":"equip_message  <code>method</code>","text":"<pre><code>def equip_message(self, item):\n</code></pre> <p>Message to be shown to the interface when an item is equipped.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item that has been equipped.</p> required Returns Type Description <code>str</code> <p>Message to be shown. Default: <code>f\"You equip {item.name}\"</code>.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.unequip_message","title":"unequip_message  <code>method</code>","text":"<pre><code>def unequip_message(self, item):\n</code></pre> <p>Message to be shown to the interface when an item is unequipped.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item that has been unequipped.</p> required Returns Type Description <code>str</code> <p>Message to be shown. Default: <code>f\"You unequip {item.name}\"</code>.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.is_item_equipped","title":"is_item_equipped  <code>method</code>","text":"<pre><code>def is_item_equipped(self, item):\n</code></pre> <p>Method to check whether the given item is equipped in any of the slots.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to check.</p> required Returns Type Description <code>bool</code> <p><code>True</code> is item is equipped, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.get_slot","title":"get_slot  <code>method</code>","text":"<pre><code>def get_slot(self, item):\n</code></pre> <p>Method to get the appropriate slot for the item.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item whose slot is required.</p> required Raises Type Description <code>AttributeError</code> <p>When <code>item.equippable</code> is None.</p> Returns Type Description <code>str</code> <p><code>'weapon'</code> if <code>item.equippable.equipment_type</code> is <code>EquipmentType.WEAPON</code>, <code>'armor'</code> otherwise.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.unequip","title":"unequip  <code>method</code>","text":"<pre><code>def unequip(self, item):\n</code></pre> <p>Method to unequip the given item.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to unequip.</p> required Raises Type Description <code>AttributeError</code> <p>When <code>item.equippable</code> is None.</p> Returns Type Description <code>bool</code> <p><code>True</code> if the item was unequipped, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.unequip_current_item","title":"unequip_current_item  <code>method</code>","text":"<pre><code>def unequip_current_item(self, slot):\n</code></pre> <p>Method to unequip the current item in a slot.</p> Parameters Name Type Description Default <code>slot</code> <code>str</code> <p>Slot to unequip the item from.</p> required Returns Type Description <code>Item | None</code> <p>Unequipped item or None if nothing was unequipped.</p>"},{"location":"reference/yarl/components/equipment/#yarl.components.equipment.Equipment.equip","title":"equip  <code>method</code>","text":"<pre><code>def equip(self, item):\n</code></pre> <p>Method to equip the given item to its appropriate slot.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to equip.</p> required Raises Type Description <code>AttributeError</code> <p>When <code>item.equippable</code> is <code>None</code>.</p> Returns Type Description <code>Item | None</code> <p>Item which was previously in this slot or <code>None</code> if there was no such item in the slot.</p>"},{"location":"reference/yarl/components/equippable/","title":"Equippable","text":""},{"location":"reference/yarl/components/equippable/#yarl.components.equippable.Equippable","title":"Equippable  <code>class</code>","text":"<pre><code>def __init__(self, equipment_type=EquipmentType.WEAPON, power_bonus=0, defense_bonus=0, owner=None):\n</code></pre> <p>         Bases: <code>Component[Item]</code></p> <p>Component which makes an item equippable and grant bonuses.</p> <p>It expects an instance of <code>Item</code> as the owner.</p> Attributes Name Type Description <code>equipment_type</code> <code>EquipmentType</code> <p>Type of equipment.</p> <code>power_bonus</code> <code>int</code> <p>Power bonus granted by the equipment.</p> <code>defense_bons</code> <code>int</code> <p>Defense bonus granted by the equipment.</p> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> Parameters Name Type Description Default <code>equipment_type</code> <code>EquipmentType</code> <p>Type of equipment.</p> <code>EquipmentType.WEAPON</code> <code>power_bonus</code> <code>int</code> <p>Power bonus granted by the equipment.</p> <code>0</code> <code>defense_bonus</code> <code>int</code> <p>Defense bonus granted by the equipment.</p> <code>0</code> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/fighter/","title":"Fighter","text":""},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter","title":"Fighter  <code>class</code>","text":"<pre><code>def __init__(self, max_hp, base_defense, base_power, attack_delay=0, owner=None):\n</code></pre> <p>         Bases: <code>Component[ActiveEntity]</code></p> <p>Component which adds combat abilities.</p> <p>It expects an instance of <code>ActiveEntity</code> as the owner.</p> Note <p>Some methods might seem unnecessary. For example, methods like <code>increase_max_hp()</code>, <code>increase_power()</code>, etc. But, using these methods allows subclasses to customize how the the attributes related to the methods are increased.</p> Attributes Name Type Description <code>max_hp</code> <code>int</code> <p>Maximum HP of the fighter.</p> <code>base_defense</code> <code>int</code> <p>Base defense of the fighter. This affects the amount of damage that can be inflicted on the fighter.</p> <code>base_power</code> <code>int</code> <p>Base power of the fighter. This affects the amount of damage the fighter can inflict on targets.</p> <code>attack_delay</code> <code>int</code> <p>Attack delay of the fighter. After attacking once, the fighter will wait for <code>attack_delay</code> turns before attacking again.</p> <code>attack_wait</code> <code>int</code> <p>Current number of turns the entity needs to wait before attacking agin.</p> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns the fighter.</p> Parameters Name Type Description Default <code>max_hp</code> <code>int</code> <p>Maximum HP of the fighter.</p> required <code>base_defense</code> <code>int</code> <p>Base defense of the fighter.</p> required <code>base_power</code> <code>int</code> <p>Base power of the fighter.</p> required <code>attack_delay</code> <code>int</code> <p>Attack delay of the fighter. After attacking once, the fighter will wait for <code>attack_delay</code> turns before attacking again.</p> <code>0</code> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns the fighter.</p> <code>None</code>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.hp","title":"hp  <code>writable</code> <code>property</code>","text":"<pre><code>hp: int\n</code></pre> <p>Current hp of the fighter.</p> <p>The setter makes sure that <code>self.hp</code> doesn\u2019t go above <code>self.max_hp</code> and also initiates <code>self.die()</code> if <code>self.hp</code> becomes <code>0</code>.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.defense_bonus","title":"defense_bonus  <code>property</code>","text":"<pre><code>defense_bonus: int\n</code></pre> <p>Defense bonus that comes from <code>self.owner</code>\u2018s equipment.</p> <p>It returns 0 if <code>self.owner</code> is None or the owner has no equipment.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.defense","title":"defense  <code>property</code>","text":"<pre><code>defense: int\n</code></pre> <p>Total defense of the fighter.</p> <p>It is the sum of <code>self.base_defense and self.defense_bonus</code>.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.power_bonus","title":"power_bonus  <code>property</code>","text":"<pre><code>power_bonus: int\n</code></pre> <p>Defense bonus that comes from <code>self.owner</code>\u2018s equipment.</p> <p>It returns 0 if <code>self.owner</code> is None or the owner has no equipment.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.power","title":"power  <code>property</code>","text":"<pre><code>power: int\n</code></pre> <p>Total power of the fighter.</p> <p>It is the sum of <code>self.base_power and self.power_bonus</code>.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.is_waiting_to_attack","title":"is_waiting_to_attack  <code>property</code>","text":"<pre><code>is_waiting_to_attack: bool\n</code></pre> <p>Indicates whether the fighter is waiting to attack at the moment.</p> <p>Checking this also reduces the number of turns the fighter has to wait by 1.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.increase_max_hp","title":"increase_max_hp  <code>method</code>","text":"<pre><code>def increase_max_hp(self, amount, increase_hp=False):\n</code></pre> <p>Method to increase the maximum HP of the fighter and optionally increase the current HP by the same amount.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the maximum HP by.</p> required <code>increase_hp</code> <code>bool</code> <p>Indicates whether the current HP should be increased as well.</p> <code>False</code>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.increase_power","title":"increase_power  <code>method</code>","text":"<pre><code>def increase_power(self, amount):\n</code></pre> <p>Method to increase the base power of the fighter.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the base power by.</p> required"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.increase_defense","title":"increase_defense  <code>method</code>","text":"<pre><code>def increase_defense(self, amount):\n</code></pre> <p>Method to increase the base defense of the fighter.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the base defense by.</p> required"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.attack","title":"attack  <code>method</code>","text":"<pre><code>def attack(self, target):\n</code></pre> <p>Method to attack the given target entity.</p> <p>The damage is calculated as <code>max(0, self.power - target.fighter.defense)</code>.</p> Parameters Name Type Description Default <code>target</code> <code>ActiveEntity</code> <p>Entity to attack.</p> required Returns Type Description <code>bool</code> <p>Target is alive or not.</p> <code>int</code> <p>Damage inflicted on the target.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.heal","title":"heal  <code>method</code>","text":"<pre><code>def heal(self, amount):\n</code></pre> <p>Method to heal the fighter by the given amount.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to heal the fighter by.</p> required Returns Type Description <code>int</code> <p>Amount of health recovered. This might be different that <code>amount</code> since adding <code>amount</code> might lead to the HP becoming greater than <code>max_hp</code>.</p>"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.take_damage","title":"take_damage  <code>method</code>","text":"<pre><code>def take_damage(self, damage):\n</code></pre> <p>Method to inflict damage on the fighter.</p> Parameters Name Type Description Default <code>damage</code> <code>int</code> <p>Amount of damage to inflict.</p> required"},{"location":"reference/yarl/components/fighter/#yarl.components.fighter.Fighter.die","title":"die  <code>method</code>","text":"<pre><code>def die(self):\n</code></pre> <p>Method to set the fighter\u2019s owner\u2019s state as dead.</p> <p>If no owner is set, it does nothing.</p> <p>After the method:</p> <ul> <li><code>self.owner.char = '%'</code></li> <li><code>self.owner.color = (191, 0, 0)</code></li> <li><code>self.owner.blocking = False</code></li> <li><code>self.owner.ai = None</code></li> <li><code>self.owner.render_order = RenderOrder.CORPSE</code></li> </ul>"},{"location":"reference/yarl/components/inventory/","title":"Inventory","text":""},{"location":"reference/yarl/components/inventory/#yarl.components.inventory.Inventory","title":"Inventory  <code>class</code>","text":"<pre><code>def __init__(self, capacity, owner=None):\n</code></pre> <p>         Bases: <code>Component[ActiveEntity]</code></p> <p>Component which adds inventory capabilities.</p> <p>It expects an instance of <code>ActiveEntity</code> as the owner.</p> Attributes Name Type Description <code>capacity</code> <code>int</code> <p>Inventory capacity.</p> <code>items</code> <code>list[Item]</code> <p>Items in the inventory.</p> Parameters Name Type Description Default <code>capacity</code> <code>int</code> <p>Capacity of the inventory.</p> required <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/inventory/#yarl.components.inventory.Inventory.remove_item","title":"remove_item  <code>method</code>","text":"<pre><code>def remove_item(self, item):\n</code></pre> <p>Method to remove the given item from the inventory.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to remove.</p> required Raises Type Description <code>ValueError</code> <p>When <code>item</code> is not in the inventory.</p>"},{"location":"reference/yarl/components/inventory/#yarl.components.inventory.Inventory.add_item","title":"add_item  <code>method</code>","text":"<pre><code>def add_item(self, item):\n</code></pre> <p>Method to add an item to the inventory.</p> Parameters Name Type Description Default <code>item</code> <code>Item</code> <p>Item to add.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if the item was added, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/components/level/","title":"Level","text":""},{"location":"reference/yarl/components/level/#yarl.components.level.Level","title":"Level  <code>class</code>","text":"<pre><code>def __init__(self, current_level=1, current_xp=0, level_up_base=0, level_up_factor=150, xp_given=0, owner=None):\n</code></pre> <p>         Bases: <code>Component[ActiveEntity]</code></p> <p>Component which adds leveling up capabilities.</p> <p>It expects an instance of <code>ActiveEntity</code> as the owner.</p> Attributes Name Type Description <code>current_level</code> <code>int</code> <p>Current level.</p> <code>current_xp</code> <code>int</code> <p>Current XP points.</p> <code>level_up_base</code> <code>int</code> <p>Level up base amount. This is used to calculate the amount of XP required to level up from the current level.</p> <code>level_up_factor</code> <code>int</code> <p>Amount by which the XP required to level up from the current level should be increased after each level.</p> <code>xp_given</code> <code>int</code> <p>Amount of XP granted to other entities when the owner of this component is killed by them.</p> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns this component.</p> Parameters Name Type Description Default <code>current_level</code> <code>int</code> <p>Level to start the component from.</p> <code>1</code> <code>current_xp</code> <code>int</code> <p>Current XP.</p> <code>0</code> <code>level_up_base</code> <code>int</code> <p>Level up base amount. This is used to calculate the amount of XP required to level up from the current level.</p> <code>0</code> <code>level_up_factor</code> <code>int</code> <p>Amount by which the XP required to level up from the current level should be increased after each level.</p> <code>150</code> <code>xp_given</code> <code>int</code> <p>Amount of XP granted to other entities when the owner of this component is killed by them.</p> <code>0</code> <code>owner</code> <code>ActiveEntity | None</code> <p><code>ActiveEntity</code> instance that owns this component</p> <code>None</code>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.xp_to_next_level","title":"xp_to_next_level  <code>property</code>","text":"<pre><code>xp_to_next_level: int\n</code></pre> <p>XP required to get to the next level.</p> <p>This is calculated as <code>self.level_up_base + self.current_level * self.level_up_factor</code>.</p>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.can_level_up","title":"can_level_up  <code>property</code>","text":"<pre><code>can_level_up: bool\n</code></pre> <p>Indicates if a level up is possible.</p>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.add_xp","title":"add_xp  <code>method</code>","text":"<pre><code>def add_xp(self, xp):\n</code></pre> <p>Method to add XP to the current XP.</p> Parameters Name Type Description Default <code>xp</code> <code>int</code> <p>Amount of xp to be added.</p> required"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.level_up","title":"level_up  <code>method</code>","text":"<pre><code>def level_up(self):\n</code></pre> <p>Method to level up without any boosts.</p>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.level_up_with_boost","title":"level_up_with_boost  <code>method</code>","text":"<pre><code>def level_up_with_boost(self, boost, amount=1):\n</code></pre> <p>Method to level up with a particular boost.</p> <p><code>boost</code> should be one of <code>'max_hp'</code>, <code>'power'</code>, <code>'defense'</code>.</p> Parameters Name Type Description Default <code>boost</code> <code>str</code> <p>Stat to boost.</p> required <code>amount</code> <code>int</code> <p>Amount the stat should be boosted by.</p> <code>1</code> Raises Type Description <code>AttributeError</code> <p>If <code>self.owner</code> is <code>None</code>.</p> <code>ValueError</code> <p>If <code>boost</code> is not one of <code>'max_hp'</code>, <code>'power'</code>, <code>'defense'</code>.</p>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.increase_max_hp","title":"increase_max_hp  <code>method</code>","text":"<pre><code>def increase_max_hp(self, amount=20):\n</code></pre> <p>Method to increase the maximum HP and current HP of the owner\u2019s fighter.</p> <p>It does nothing if the owner is not set.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the HP by.</p> <code>20</code>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.increase_power","title":"increase_power  <code>method</code>","text":"<pre><code>def increase_power(self, amount=1):\n</code></pre> <p>Method to increase the base power of the owner\u2019s fighter.</p> <p>It does nothing if the owner is not set.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the base power by.</p> <code>1</code>"},{"location":"reference/yarl/components/level/#yarl.components.level.Level.increase_defense","title":"increase_defense  <code>method</code>","text":"<pre><code>def increase_defense(self, amount=1):\n</code></pre> <p>Method to increase the base defense of the owner\u2019s fighter.</p> <p>It does nothing if the owner is not set.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Amount to increase the base defense by.</p> <code>1</code>"},{"location":"reference/yarl/components/consumables/","title":"Consumables","text":"<p>This package defines the base class that should be used by all consumables and some pre-defined consumables that can be used straight out of the box.</p>"},{"location":"reference/yarl/components/consumables/base_consumable/","title":"Base consumable","text":""},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable","title":"Consumable  <code>class</code>","text":"<pre><code>def __init__(self, owner=None):\n</code></pre> <p>         Bases: <code>Component[Item]</code></p> <p>Base component for all consumables.</p> <p>It and its subclasses expect an instance of <code>Item</code> as their owner.</p> Parameters Name Type Description Default <code>owner</code> <code>Item | None</code> <p><code>Item</code> that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable.get_action_or_handler","title":"get_action_or_handler  <code>method</code>","text":"<pre><code>def get_action_or_handler(self, entity, engine, old_event_handler=None):\n</code></pre> <p>Method to get the action or the event handler that should be used to consume this consumable.</p> <p>Subclasses should override this method to customize the action or event handler.</p> <p>By default, it returns an instance of <code>ConsumeItemAction</code>.</p> Parameters Name Type Description Default <code>entity</code> <code>ActiveEntity</code> <p>Entity consuming the consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>old_event_handler</code> <code>BaseEventHandler | None</code> <p>Previous event handler.</p> <code>None</code> Returns Type Description <code>ActionOrHandlerType</code> <p>Action or event handler that should be used to consume this consumable.</p>"},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable.is_visible","title":"is_visible  <code>method</code>","text":"<pre><code>def is_visible(self, engine, x, y):\n</code></pre> <p>Method to check if the location <code>(x, y)</code> is visible in the game map\u2019s FOV.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the game.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location to check.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location to check.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if <code>(x, y)</code> is visible, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable.get_targets","title":"get_targets  <code>method</code>","text":"<pre><code>def get_targets(self, *, engine, consumer=None, location=None):\n</code></pre> <p>Method to obtain the target(s) of the consumable based on the parameters.</p> <p>By default, it returns <code>None</code>. Subclasses which expect targets should ideally implement this method for finding targets.</p> <p>Any of the parameters can be used to find the targets.</p> <p>All parameters are keyword-only.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>consumer</code> <code>ActiveEntity | None</code> <p>Optional entity that is consuming the consumable.</p> <code>None</code> <code>location</code> <code>tuple[int, int] | None</code> <p>optional <code>(x, y)</code> location where targets need to be found.</p> <code>None</code> Returns Type Description <code>ActiveEntity | set[ActiveEntity] | None</code> <p>A single <code>ActiveEntity</code> instance if there is a single target, a set (can be empty) entities if there are multiple targets and <code>None</code> otherwise.</p>"},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable.consume","title":"consume  <code>method</code>","text":"<pre><code>def consume(self, consumer):\n</code></pre> <p>Method to remove this item from the consumer\u2019s inventory, if it is present, after consumption.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity consuming this consumable.</p> required"},{"location":"reference/yarl/components/consumables/base_consumable/#yarl.components.consumables.base_consumable.Consumable.activate","title":"activate  <code>method</code>","text":"<pre><code>def activate(self, consumer, engine, target_location=None):\n</code></pre> <p>Method which implements the consumption logic for the consumable.</p> <p>By default, it raises <code>NotImplementedError</code>. Subclasses should implement this method accordingly.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity consuming this consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>target_location</code> <code>tuple[int, int] | None</code> <p>Optional target location on the map for targeted consumables.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/confusion_spell/","title":"Confusion spell","text":""},{"location":"reference/yarl/components/consumables/confusion_spell/#yarl.components.consumables.confusion_spell.ConfusionSpell","title":"ConfusionSpell  <code>class</code>","text":"<pre><code>def __init__(self, number_of_turns, owner=None):\n</code></pre> <p>         Bases: <code>Consumable</code></p> <p>Consumable which applies a confusion effect on a target.</p> Attributes Name Type Description <code>number_of_turns</code> <code>int</code> <p>Number of turns the confusion effect should persist for.</p> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> Parameters Name Type Description Default <code>number_of_turns</code> <code>int</code> <p>Number of turns the confusion effect should persist for.</p> required <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/confusion_spell/#yarl.components.consumables.confusion_spell.ConfusionSpell.get_action_or_handler","title":"get_action_or_handler  <code>method</code>","text":"<pre><code>def get_action_or_handler(self, entity, engine, old_event_handler=None):\n</code></pre> <p>Method to get the event handler that should be used to consume this consumable.</p> Parameters Name Type Description Default <code>entity</code> <code>ActiveEntity</code> <p>Entity consuming the consumable. This argument is not actually used by the method.</p> required <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>old_event_handler</code> <code>BaseEventHandler | None</code> <p>Previous event handler.</p> <code>None</code> Raises Type Description <code>AttributeError</code> <p>When <code>self.owner</code> is <code>None</code>.</p> Returns Type Description <code>SelectTargetIndexEventHandler</code> <p>Event handler for selecting the target index.</p>"},{"location":"reference/yarl/components/consumables/confusion_spell/#yarl.components.consumables.confusion_spell.ConfusionSpell.get_targets","title":"get_targets  <code>method</code>","text":"<pre><code>def get_targets(self, *, engine, consumer=None, location=None):\n</code></pre> <p>Method to get the target for the confusion effect.</p> <p>Passing <code>consumer</code> has no effect since the confusion spell is applied to a specific entity at a location.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>location</code> <code>tuple[int, int] | None</code> <p>Location to get the target from.</p> <code>None</code> Returns Type Description <code>ActiveEntity | set[ActiveEntity] | None</code> <p>Target at <code>location</code>, or <code>None</code> if no target exists or if <code>location</code> is set as <code>None</code>.</p>"},{"location":"reference/yarl/components/consumables/confusion_spell/#yarl.components.consumables.confusion_spell.ConfusionSpell.activate","title":"activate  <code>method</code>","text":"<pre><code>def activate(self, consumer, engine, target_location=None):\n</code></pre> <p>Method to activate the confusion effect on a target.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity consuming the consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>target_location</code> <code>tuple[int, int] | None</code> <p>Location of the target the effect should be applied on.</p> <code>None</code> Raises Type Description <code>AttributeError</code> <p>If <code>self.owner</code> is <code>None</code>.</p> <code>ImpossibleActionException</code> <p>When consumable cannot be activated.</p>"},{"location":"reference/yarl/components/consumables/fireball_scroll/","title":"Fireball scroll","text":""},{"location":"reference/yarl/components/consumables/fireball_scroll/#yarl.components.consumables.fireball_scroll.FireballScroll","title":"FireballScroll  <code>class</code>","text":"<pre><code>def __init__(self, power, radius, owner=None):\n</code></pre> <p>         Bases: <code>Consumable</code></p> <p>Consumable which attacks targets in a selected area with a fireball.</p> <p>The effect of the fireball decreases with distance. Thus, targets that are farther away are dealt lower damage. It also affects the consumer if the consumer is within the affected area.</p> Attributes Name Type Description <code>power</code> <code>int</code> <p>Base damage inflicted by the fireball.</p> <code>radius</code> <code>int</code> <p>Range of the fireball in all four-directions.</p> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> Parameters Name Type Description Default <code>power</code> <code>int</code> <p>Base damage inflicted by the fireball.</p> required <code>radius</code> <code>int</code> <p>Range of the fireball in all four-directions.</p> required <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/fireball_scroll/#yarl.components.consumables.fireball_scroll.FireballScroll.get_action_or_handler","title":"get_action_or_handler  <code>method</code>","text":"<pre><code>def get_action_or_handler(self, entity, engine, old_event_handler=None):\n</code></pre> <p>Method to get the event handler that should be used to consume this consumable.</p> Parameters Name Type Description Default <code>entity</code> <code>ActiveEntity</code> <p>Entity consuming the consumable. This argument is not actually used by the method.</p> required <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>old_event_handler</code> <code>BaseEventHandler | None</code> <p>Previous event handler.</p> <code>None</code> Raises Type Description <code>AttributeError</code> <p>When <code>self.owner</code> is <code>None</code>.</p> Returns Type Description <code>SelectTargetAreaEventHandler</code> <p>Event handler for selecting the center of the target area.</p>"},{"location":"reference/yarl/components/consumables/fireball_scroll/#yarl.components.consumables.fireball_scroll.FireballScroll.get_targets","title":"get_targets  <code>method</code>","text":"<pre><code>def get_targets(self, engine, consumer=None, location=None):\n</code></pre> <p>Method to get the targets for the fireball.</p> <p>Passing <code>consumer</code> has no effect since the fireball affects all targets within its radius.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine that represents the current game.</p> required <code>location</code> <code>tuple[int, int] | None</code> <p>Center of the area covered by the fireball.</p> <code>None</code> Returns Type Description <code>ActiveEntity | set[ActiveEntity] | None</code> <p>Targets within <code>self.radius</code> as a set (can be empty), or <code>None</code> if <code>location</code> is set to <code>None</code>.</p>"},{"location":"reference/yarl/components/consumables/fireball_scroll/#yarl.components.consumables.fireball_scroll.FireballScroll.get_damage","title":"get_damage  <code>method</code>","text":"<pre><code>def get_damage(self, target_location, target):\n</code></pre> <p>Method to calculate the damage the fireball should inflict on target based on its distance from the center of the target area.</p> <p>If <code>base_damage</code> is the damage without taking into account the distance and <code>distance</code> is the distance of the target from the center, the damage is calculated as:</p> <pre><code>&gt;&gt;&gt; math.ceil(base_damage * (1 - distance) / self.radius)\n</code></pre> Parameters Name Type Description Default <code>target_location</code> <code>tuple[int, int]</code> <p>Center of the target area.</p> required <code>target</code> <code>ActiveEntity</code> <p>Target to calculate the damage for.</p> required"},{"location":"reference/yarl/components/consumables/fireball_scroll/#yarl.components.consumables.fireball_scroll.FireballScroll.activate","title":"activate  <code>method</code>","text":"<pre><code>def activate(self, consumer, engine, target_location=None):\n</code></pre> <p>Method to activate the fireball on the target area represented by its center.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity consuming the consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>target_location</code> <code>tuple[int, int] | None</code> <p>Center of the target area.</p> <code>None</code> Raises Type Description <code>AttributeError</code> <p>If <code>self.owner</code> is <code>None</code>.</p> <code>ImpossibleActionException</code> <p>When consumable cannot be activated.</p>"},{"location":"reference/yarl/components/consumables/healing_potion/","title":"Healing potion","text":""},{"location":"reference/yarl/components/consumables/healing_potion/#yarl.components.consumables.healing_potion.HealingPotion","title":"HealingPotion  <code>class</code>","text":"<pre><code>def __init__(self, amount, owner=None):\n</code></pre> <p>         Bases: <code>Consumable</code></p> <p>Consumable which heals the consumer by a specific amount.</p> Attributes Name Type Description <code>amount</code> <code>int</code> <p>Amount of health recovered.</p> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> Parameters Name Type Description Default <code>amount</code> <code>int</code> <p>Maximum HP granted by the potion.</p> required <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/healing_potion/#yarl.components.consumables.healing_potion.HealingPotion.activate","title":"activate  <code>method</code>","text":"<pre><code>def activate(self, consumer, engine, target_location=None):\n</code></pre> <p>Method to activate the healing effect of the consumable.</p> <p>Passing <code>target_location</code> has no effect since this is not a targeted consumable.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity that is consuming the consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required Raises Type Description <code>AttributeError</code> <p>If <code>self.owner</code> is <code>None</code>.</p> <code>ImpossibleActionException</code> <p>When consumable cannot be activated.</p>"},{"location":"reference/yarl/components/consumables/lightning_scroll/","title":"Lightning scroll","text":""},{"location":"reference/yarl/components/consumables/lightning_scroll/#yarl.components.consumables.lightning_scroll.LightningScroll","title":"LightningScroll  <code>class</code>","text":"<pre><code>def __init__(self, power, range, owner=None):\n</code></pre> <p>         Bases: <code>Consumable</code></p> <p>Consumable which strikes the closest active entity to the consumer with a lightning bolt, dealing massive damage.</p> Attributes Name Type Description <code>power</code> <code>int</code> <p>Base damage inflicted by the bolt.</p> <code>range</code> <code>int</code> <p>Range of the bolt. This determines how far way from the consumer\u2019s location targets will be looked for.</p> <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> Parameters Name Type Description Default <code>power</code> <code>int</code> <p>Base damage inflicted by the bolt.</p> required <code>range</code> <code>int</code> <p>Range of the bolt.</p> required <code>owner</code> <code>Item | None</code> <p><code>Item</code> instance that owns this component.</p> <code>None</code>"},{"location":"reference/yarl/components/consumables/lightning_scroll/#yarl.components.consumables.lightning_scroll.LightningScroll.get_targets","title":"get_targets  <code>method</code>","text":"<pre><code>def get_targets(self, *, engine, consumer=None, location=None):\n</code></pre> <p>Method to get the target for the lightning bolt.</p> <p>Passing location has no effect since the target is automatically selected based on the consumer\u2019s position.</p> Parameters Name Type Description Default <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required <code>consumer</code> <code>ActiveEntity | None</code> <p>Entity consuming the consumable.</p> <code>None</code> Returns Type Description <code>ActiveEntity | set[ActiveEntity] | None</code> <p>Target closest to the consumer within the bolt\u2019s range or <code>None</code> if no such target exists or if <code>consumer</code> is passed as <code>None</code>.</p>"},{"location":"reference/yarl/components/consumables/lightning_scroll/#yarl.components.consumables.lightning_scroll.LightningScroll.activate","title":"activate  <code>method</code>","text":"<pre><code>def activate(self, consumer, engine, target_location=None):\n</code></pre> <p>Method to activate the lightning bolt.</p> <p>Passing <code>target_location</code> has no effect since this is selects its target automatically based on the consumer\u2019s position.</p> Parameters Name Type Description Default <code>consumer</code> <code>ActiveEntity</code> <p>Entity consuming the consumable.</p> required <code>engine</code> <code>Engine</code> <p>Engine representing the current game.</p> required Raises Type Description <code>AttributeError</code> <p>If <code>self.owner</code> is <code>None</code>.</p> <code>ImpossibleActionException</code> <p>When consumable cannot be activated.</p>"},{"location":"reference/yarl/event_handlers/","title":"Event handlers","text":""},{"location":"reference/yarl/event_handlers/ask_user/","title":"Ask user","text":""},{"location":"reference/yarl/event_handlers/base_event_handler/","title":"Base event handler","text":""},{"location":"reference/yarl/event_handlers/base_event_handler/#yarl.event_handlers.base_event_handler.BaseEventHandler","title":"BaseEventHandler  <code>class</code>","text":"<p>         Bases: <code>tcod.event.EventDispatch[ActionOrHandlerType]</code></p> <p>Base event handler class for all event handlers.</p>"},{"location":"reference/yarl/event_handlers/base_event_handler/#yarl.event_handlers.base_event_handler.BaseEventHandler.post_events","title":"post_events  <code>method</code>","text":"<pre><code>def post_events(self, context):\n</code></pre> <p>Method which can be used to do things after all events have been processed.</p>"},{"location":"reference/yarl/event_handlers/consume_single_item/","title":"Consume single item","text":""},{"location":"reference/yarl/event_handlers/controls/","title":"Controls","text":""},{"location":"reference/yarl/event_handlers/event_handler/","title":"Event handler","text":""},{"location":"reference/yarl/event_handlers/game_over/","title":"Game over","text":""},{"location":"reference/yarl/event_handlers/history/","title":"History","text":""},{"location":"reference/yarl/event_handlers/history/#yarl.event_handlers.history.HistoryEventHandler","title":"HistoryEventHandler  <code>class</code>","text":"<pre><code>def __init__(self, engine, old_event_handler=None):\n</code></pre> <p>         Bases: <code>EventHandler</code></p> <p>Print the history on a larger window which can be navigated.</p>"},{"location":"reference/yarl/event_handlers/inventory/","title":"Inventory","text":""},{"location":"reference/yarl/event_handlers/inventory_drop/","title":"Inventory drop","text":""},{"location":"reference/yarl/event_handlers/level_up/","title":"Level up","text":""},{"location":"reference/yarl/event_handlers/look/","title":"Look","text":""},{"location":"reference/yarl/event_handlers/main_game/","title":"Main game","text":""},{"location":"reference/yarl/event_handlers/main_menu/","title":"Main menu","text":""},{"location":"reference/yarl/event_handlers/main_menu/#yarl.event_handlers.main_menu.MainMenuEventHandler","title":"MainMenuEventHandler  <code>class</code>","text":"<pre><code>def __init__(self, engine, background_image_path=''):\n</code></pre> <p>         Bases: <code>BaseEventHandler</code></p>"},{"location":"reference/yarl/event_handlers/main_menu/#yarl.event_handlers.main_menu.MainMenuEventHandler.on_render","title":"on_render  <code>method</code>","text":"<pre><code>def on_render(self, console):\n</code></pre> <p>Render the main menu.</p>"},{"location":"reference/yarl/event_handlers/player_info/","title":"Player info","text":""},{"location":"reference/yarl/event_handlers/popup_message/","title":"Popup message","text":""},{"location":"reference/yarl/event_handlers/popup_message/#yarl.event_handlers.popup_message.PopupMessageEventHandler","title":"PopupMessageEventHandler  <code>class</code>","text":"<pre><code>def __init__(self, parent_handler, message):\n</code></pre> <p>         Bases: <code>BaseEventHandler</code></p>"},{"location":"reference/yarl/event_handlers/popup_message/#yarl.event_handlers.popup_message.PopupMessageEventHandler.ev_keydown","title":"ev_keydown  <code>method</code>","text":"<pre><code>def ev_keydown(self, event):\n</code></pre> <p>Any key returns to the parent handler.</p>"},{"location":"reference/yarl/event_handlers/select_index/","title":"Select index","text":""},{"location":"reference/yarl/event_handlers/select_index/#yarl.event_handlers.select_index.SelectIndexEventHandler","title":"SelectIndexEventHandler  <code>class</code>","text":"<pre><code>def __init__(self, engine, old_event_handler=None):\n</code></pre> <p>         Bases: <code>AskUserEventHandler</code></p>"},{"location":"reference/yarl/event_handlers/select_index/#yarl.event_handlers.select_index.SelectIndexEventHandler.on_render","title":"on_render  <code>method</code>","text":"<pre><code>def on_render(self, console):\n</code></pre> <p>Highlight the tile under the cursor.</p>"},{"location":"reference/yarl/event_handlers/select_item/","title":"Select item","text":""},{"location":"reference/yarl/event_handlers/select_item/#yarl.event_handlers.select_item.SelectItemEventHandler","title":"SelectItemEventHandler  <code>class</code>","text":"<pre><code>def __init__(self, engine, items, old_event_handler=None):\n</code></pre> <p>         Bases: <code>AskUserEventHandler</code></p>"},{"location":"reference/yarl/event_handlers/select_item/#yarl.event_handlers.select_item.SelectItemEventHandler.on_item_selected","title":"on_item_selected  <code>method</code>","text":"<pre><code>def on_item_selected(self, item):\n</code></pre> <p>Called when the user selects a valid item.</p>"},{"location":"reference/yarl/event_handlers/select_item_to_consume/","title":"Select item to consume","text":""},{"location":"reference/yarl/event_handlers/select_item_to_pick_up/","title":"Select item to pick up","text":""},{"location":"reference/yarl/event_handlers/select_target_area/","title":"Select target area","text":""},{"location":"reference/yarl/event_handlers/select_target_index/","title":"Select target index","text":""},{"location":"reference/yarl/interface/","title":"Interface","text":"<p>Package to handle generic rendering and provide colors.</p>"},{"location":"reference/yarl/interface/color/","title":"Color","text":"<p>This module provides some RGB color constants and a <code>namedtuple</code> to represent colors.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.COLORS","title":"COLORS  <code>module-attribute</code>","text":"<pre><code>COLORS: dict[str, RGB] = {color.name.lower(): color.value for color in ColorConstants}\n</code></pre> <p>All available colors as a dictionary.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.RGB","title":"RGB  <code>class</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>NamedTuple to represent an RGB color.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.RGB.red","title":"red  <code>class-attribute</code>","text":"<pre><code>red: int\n</code></pre> <p>Red component of the color.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.RGB.green","title":"green  <code>class-attribute</code>","text":"<pre><code>green: int\n</code></pre> <p>Green component of the color.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.RGB.blue","title":"blue  <code>class-attribute</code>","text":"<pre><code>blue: int\n</code></pre> <p>Blue component of the color.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.RGB.hex_format","title":"hex_format  <code>method</code>","text":"<pre><code>def hex_format(self):\n</code></pre> <p>Method to obtain the color in hex format.</p> Returns Type Description <code>str</code> <p>Color as a <code>#&lt;ab&gt;&lt;cd&gt;&lt;de&gt;</code> hex string.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants","title":"ColorConstants  <code>class</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Enum of all the colors.</p> <p>A color\u2019s key in <code>COLORS</code> is shown below.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ALICEBLUE","title":"ALICEBLUE  <code>class-attribute</code>","text":"<pre><code>ALICEBLUE = RGB(240, 248, 255)\n</code></pre> <p><code>aliceblue</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ANTIQUEWHITE","title":"ANTIQUEWHITE  <code>class-attribute</code>","text":"<pre><code>ANTIQUEWHITE = RGB(250, 235, 215)\n</code></pre> <p><code>antiquewhite</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ANTIQUEWHITE1","title":"ANTIQUEWHITE1  <code>class-attribute</code>","text":"<pre><code>ANTIQUEWHITE1 = RGB(255, 239, 219)\n</code></pre> <p><code>antiquewhite1</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ANTIQUEWHITE2","title":"ANTIQUEWHITE2  <code>class-attribute</code>","text":"<pre><code>ANTIQUEWHITE2 = RGB(238, 223, 204)\n</code></pre> <p><code>antiquewhite2</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ANTIQUEWHITE3","title":"ANTIQUEWHITE3  <code>class-attribute</code>","text":"<pre><code>ANTIQUEWHITE3 = RGB(205, 192, 176)\n</code></pre> <p><code>antiquewhite3</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.ANTIQUEWHITE4","title":"ANTIQUEWHITE4  <code>class-attribute</code>","text":"<pre><code>ANTIQUEWHITE4 = RGB(139, 131, 120)\n</code></pre> <p><code>antiquewhite4</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AQUA","title":"AQUA  <code>class-attribute</code>","text":"<pre><code>AQUA = RGB(0, 255, 255)\n</code></pre> <p><code>aqua</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AQUAMARINE1","title":"AQUAMARINE1  <code>class-attribute</code>","text":"<pre><code>AQUAMARINE1 = RGB(127, 255, 212)\n</code></pre> <p><code>aquamarine1</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AQUAMARINE2","title":"AQUAMARINE2  <code>class-attribute</code>","text":"<pre><code>AQUAMARINE2 = RGB(118, 238, 198)\n</code></pre> <p><code>aquamarine2</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AQUAMARINE3","title":"AQUAMARINE3  <code>class-attribute</code>","text":"<pre><code>AQUAMARINE3 = RGB(102, 205, 170)\n</code></pre> <p><code>aquamarine3</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AQUAMARINE4","title":"AQUAMARINE4  <code>class-attribute</code>","text":"<pre><code>AQUAMARINE4 = RGB(69, 139, 116)\n</code></pre> <p><code>aquamarine4</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AZURE1","title":"AZURE1  <code>class-attribute</code>","text":"<pre><code>AZURE1 = RGB(240, 255, 255)\n</code></pre> <p><code>azure1</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AZURE2","title":"AZURE2  <code>class-attribute</code>","text":"<pre><code>AZURE2 = RGB(224, 238, 238)\n</code></pre> <p><code>azure2</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AZURE3","title":"AZURE3  <code>class-attribute</code>","text":"<pre><code>AZURE3 = RGB(193, 205, 205)\n</code></pre> <p><code>azure3</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.AZURE4","title":"AZURE4  <code>class-attribute</code>","text":"<pre><code>AZURE4 = RGB(131, 139, 139)\n</code></pre> <p><code>azure4</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.BANANA","title":"BANANA  <code>class-attribute</code>","text":"<pre><code>BANANA = RGB(227, 207, 87)\n</code></pre> <p><code>banana</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.BEIGE","title":"BEIGE  <code>class-attribute</code>","text":"<pre><code>BEIGE = RGB(245, 245, 220)\n</code></pre> <p><code>beige</code></p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.BISQUE1","title":"BISQUE1  <code>class-attribute</code>","text":"<pre><code>BISQUE1 = RGB(255, 228, 196)\n</code></pre> <p>Dictionary key: aliceblue.</p>"},{"location":"reference/yarl/interface/color/#yarl.interface.color.ColorConstants.BISQUE2","title":"BISQUE2  <code>class-attribute</code>","text":"<pre><code>BISQUE2 = RGB(238, 213, 183)\n</code></pre> <p>Dictionary key: aliceblue.</p>"},{"location":"reference/yarl/interface/message_log/","title":"Message log","text":"<p>This module provides a message log with rendering capabilities.</p>"},{"location":"reference/yarl/interface/message_log/#yarl.interface.message_log.Message","title":"Message  <code>class</code>","text":"<pre><code>def __init__(self, text, fg):\n</code></pre> <p>Class to represent a colored text message.</p> Attributes Name Type Description <code>plain_text</code> <code>str</code> <p>Text of the message.</p> <code>fg</code> <code>tuple[int, int, int]</code> <p>Color for the message.</p> <code>count</code> <code>int</code> <p>Multiplier to show beside the message.</p> Parameters Name Type Description Default <code>text</code> <code>str</code> <p>Text of the message.</p> required <code>fg</code> <code>tuple[int, int, int]</code> <p>Color for the message.</p> required"},{"location":"reference/yarl/interface/message_log/#yarl.interface.message_log.Message.full_text","title":"full_text  <code>property</code>","text":"<pre><code>full_text: str\n</code></pre> <p>The full text of the message with the count.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; msg = Message(text=\"Hello\", fg=(255, 255, 255))\n&gt;&gt;&gt; msg.full_text\n'Hello'\n&gt;&gt;&gt; msg.count = 3\n&gt;&gt;&gt; msg.full_text\n'Hello (x3)'\n</code></pre>"},{"location":"reference/yarl/interface/message_log/#yarl.interface.message_log.MessageLog","title":"MessageLog  <code>class</code>","text":"<pre><code>def __init__(self):\n</code></pre> <p>Class to represent a list of <code>Message</code> instances with rendering capabilities.</p> Attributes Name Type Description <code>messages</code> <code>list[Message]</code> <p>Current messages in the log.</p>"},{"location":"reference/yarl/interface/message_log/#yarl.interface.message_log.MessageLog.add_message","title":"add_message  <code>method</code>","text":"<pre><code>def add_message(self, text, fg=COLORS['white1'], *, stack=True):\n</code></pre> <p>Add a message to the message log with optional stacking.</p> <p>It creates a <code>Message</code> instance and adds it to the log.</p> Parameters Name Type Description Default <code>text</code> <code>str</code> <p>Text of the message.</p> required <code>fg</code> <code>tuple[int, int, int]</code> <p>Color for the message. Defaults to <code>color.WHITE</code>.</p> <code>COLORS['white1']</code> <code>stack</code> <code>bool</code> <p>Indicates whether the message should be stacked. If <code>True</code> and the last message in the log has the same text as <code>text</code>, the count of the message is incremented. Otherwise, the message is appended to the log. Defaults to <code>True</code>.</p> <code>True</code>"},{"location":"reference/yarl/interface/message_log/#yarl.interface.message_log.MessageLog.render","title":"render  <code>method</code>","text":"<pre><code>def render(self, console, x, y, width, height, *, limit=None):\n</code></pre> <p>Method to render the message log to the console.</p> <p>The messages will be rendered starting at <code>(x, y)</code>. A horizontal space of <code>width</code> and a vertical space of <code>height</code> will be used. Message lines will be wrapped to fit within <code>width</code> and each line will take up one unit of <code>height</code>. Thus, only as many message lines as can be fitted in <code>height</code> will be rendered.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render the log to.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location where rendering should start on the console.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location where rendering should start on the console.</p> required <code>width</code> <code>int</code> <p>Amount of horizontal space to use for rendering.</p> required <code>height</code> <code>int</code> <p>Amount of vertical space to use for rendering.</p> required <code>limit</code> <code>int | None</code> <p>Limits the number of messages rendered to the first <code>limit</code> messages. When set to <code>None</code>, all the messages in the log are rendered.</p> <code>None</code>"},{"location":"reference/yarl/interface/renderer/","title":"Renderer","text":"<p>This module defines some generic rendering functions that can be used to render common things like.</p>"},{"location":"reference/yarl/interface/renderer/#yarl.interface.renderer.render_fraction_bar","title":"render_fraction_bar  <code>function</code>","text":"<pre><code>def render_fraction_bar(console, current_value, max_value, total_width, string_prefix, x=0, y=0, height=1, *, bar_empty_bg=COLORS['maroon'], bar_filled_bg=COLORS['green1']):\n</code></pre> <p>Function to render a bar which has a current value and maximum value.</p> <p>The bar will be drawn at location <code>(x, y)</code>. It will occupy <code>total_width</code> amount of horizontal space, <code>height</code> amount of vertical space and have <code>bar_empty_bg</code> as the color. An area proportional to <code>current_value</code>/<code>max_value</code> will be filled with the color <code>bar_filled_fg</code>.</p> <p>It will also have the text <code>f\"{string_prefix}: {current_value}/{max_value}\"</code> inside it.</p> <p>Useful for rendering things like the player health bar.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render the bar to.</p> required <code>current_value</code> <code>int</code> <p>Current value to render in the bar.</p> required <code>max_value</code> <code>int</code> <p>Maximum value to render in the bar.</p> required <code>total_width</code> <code>int</code> <p>Amount of horizontal space that should be occupied.</p> required <code>string_prefix</code> <code>str</code> <p>Prefix of the text to show in the bar.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location to render the bar at. Defaults to 0.</p> <code>0</code> <code>y</code> <code>int</code> <p>y-coordinate of the location to render the bar at. Defaults to 0.</p> <code>0</code> <code>height</code> <code>int</code> <p>Amount of vertical space that should be occupied. Defaults to 1.</p> <code>1</code> <code>bar_empty_bg</code> <code>tuple[int, int, int]</code> <p>Color of the bar. Defaults to color.BAR_EMPTY.</p> <code>COLORS['maroon']</code> <code>bar_filled_bg</code> <code>tuple[int, int, int]</code> <p>Color of the area proportional to <code>current_value</code>/<code>max_value</code>. Defaults to color.BAR_FILLED.</p> <code>COLORS['green1']</code>"},{"location":"reference/yarl/interface/renderer/#yarl.interface.renderer.render_text_at_location","title":"render_text_at_location  <code>function</code>","text":"<pre><code>def render_text_at_location(console, text, x, y, fg=COLORS['white1']):\n</code></pre> <p>Function to render text at location <code>(x, y)</code> with color <code>fg</code>.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render the text to.</p> required <code>text</code> <code>str</code> <p>Text to render.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location to render the text at.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location to render the text at.</p> required <code>fg</code> <code>tuple[int, int, int]</code> <p>Color of the text.</p> <code>COLORS['white1']</code>"},{"location":"reference/yarl/interface/renderer/#yarl.interface.renderer.render_messages","title":"render_messages  <code>function</code>","text":"<pre><code>def render_messages(console, x, y, width, height, messages):\n</code></pre> <p>Function to render messages to the console.</p> <p>The messages will be rendered starting at <code>(x, y)</code>. A horizontal space of <code>width</code> and a vertical space of <code>height</code> will be used. Message lines will be wrapped to fit within <code>width</code> and each line will take up one unit of <code>height</code>. Thus, only as many message lines as can be fitted in <code>height</code> will be rendered.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render the messages to.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location to start rendering from.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location to start rendering from.</p> required <code>width</code> <code>int</code> <p>Amount of horizontal space.</p> required <code>height</code> <code>int</code> <p>Amount of vertical space.</p> required <code>messages</code> <code>Iterable[tuple[str, tuple[int, int, int]]]</code> <p>Messages to render. Each message should have a string representing the text to be printed and an RGB value representing the color of the text.</p> required"},{"location":"reference/yarl/map/","title":"Map","text":"<p>Package for handling game map, game map generation and game world generation.</p>"},{"location":"reference/yarl/map/gamemap/","title":"Gamemap","text":"<p>This module defines the class that will be used to represent game maps.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap","title":"GameMap  <code>class</code>","text":"<pre><code>def __init__(self, width, height, pov_radius=5, entities=()):\n</code></pre> <p>Class to represent the game map.</p> Attributes Name Type Description <code>width</code> <code>int</code> <p>Width of the map.</p> <code>height</code> <code>int</code> <p>Height of the map.</p> <code>pov_radius</code> <code>int</code> <p>Radius of the visible area for the player.</p> <code>entities</code> <code>Iterable[Entity]</code> <p>Entities in the map.</p> <code>tiles</code> <code>np.ndarray</code> <p>Array of dimensions <code>width x height</code>, representing the tiles in the map.</p> <code>visible</code> <code>np.ndarray</code> <p>Boolean array of dimensions <code>width x height</code>, representing the tiles currently visible to the player.</p> <code>explored</code> <code>np.ndarray</code> <p>Boolean array of dimensions <code>width x height</code>, representing the tiles the player as explored.</p> <code>stairs_location</code> <code>tuple[int, int]</code> <p>Location of stairs to descend to lower level of dungeon.</p> Parameters Name Type Description Default <code>width</code> <code>int</code> <p>Width of the map.</p> required <code>height</code> <code>int</code> <p>Height of the map.</p> required <code>pov_radius</code> <code>int</code> <p>Radius to be used for updating the field of view.</p> <code>5</code> <code>entities</code> <code>Iterable[Entity]</code> <p>Entities that should be added to the map.</p> <code>()</code>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.active_entities","title":"active_entities  <code>property</code>","text":"<pre><code>active_entities: Iterable[ActiveEntity]\n</code></pre> <p>All active entities in the map.</p> <p>An active entity is an instance of <code>ActiveEntity</code> (or subclasses) and has <code>entity.is_alive = True</code>.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.items","title":"items  <code>property</code>","text":"<pre><code>items: Iterable[Item]\n</code></pre> <p>All items in the map.</p> <p>An item is an instance of <code>Item</code> (or subclasses).</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.in_bounds","title":"in_bounds  <code>method</code>","text":"<pre><code>def in_bounds(self, x, y):\n</code></pre> <p>Method to check if <code>(x, y)</code> is within the bounds of the map.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate.</p> required <code>y</code> <code>int</code> <p>y-coordinate.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if <code>(x, y)</code> is within the map, <code>False</code> otherwise.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.update_fov","title":"update_fov  <code>method</code>","text":"<pre><code>def update_fov(self, pov):\n</code></pre> <p>Method to update the field-of-view (FOV) with respect to a location.</p> Parameters Name Type Description Default <code>pov</code> <code>tuple[int, int]</code> <p>Location with respect to which the POV should be updated.</p> required"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.get_entities","title":"get_entities  <code>method</code>","text":"<pre><code>def get_entities(self, x, y):\n</code></pre> <p>Method to obtain the entities at location <code>(x, y)</code>.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>set[Entity]</code> <p>All entities at location <code>(x, y)</code>.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.get_blocking_entity","title":"get_blocking_entity  <code>method</code>","text":"<pre><code>def get_blocking_entity(self, x, y):\n</code></pre> <p>Method to obtain the blocking entity at location <code>(x, y)</code>.</p> <p>A blocking entity is an instance of <code>Entity</code> and has <code>entity.blocking = True</code>.</p> <p>At any point of time, there can be at most one blocking entity at a location.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>Entity | None</code> <p>Blocking entity at <code>(x, y)</code> or <code>None</code> if there is no blocking entity.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.get_items","title":"get_items  <code>method</code>","text":"<pre><code>def get_items(self, x, y):\n</code></pre> <p>Method to obtain the items at location <code>(x, y)</code>.</p> <p>An item is an instance of <code>Item</code> (or subclasses).</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>set[Item]</code> <p>Items at location <code>(x, y)</code>.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.get_active_entity","title":"get_active_entity  <code>method</code>","text":"<pre><code>def get_active_entity(self, x, y):\n</code></pre> <p>Method to obtain the active entity at location <code>(x, y)</code>.</p> <p>An active entity is an instance of <code>ActiveEntity</code> (or subclasses) and has <code>entity.is_alive = True</code>.</p> <p>At any point of time, there can at most one active entity at a location.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>ActiveEntity | None</code> <p>Active entity at location <code>(x, y)</code> or <code>None</code> if there is no active entity.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.move_entity","title":"move_entity  <code>method</code>","text":"<pre><code>def move_entity(self, entity, x, y, *, check_blocking=True):\n</code></pre> <p>Method to move an entity to a new location.</p> Parameters Name Type Description Default <code>entity</code> <code>Entity</code> <p>Entity to be moved.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the new location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the new location.</p> required Raises Type Description <code>IndexError</code> <p>If <code>(x, y)</code> is out of bounds or the tile at <code>(x, y)</code> is not walkable.</p> <code>CollisionWithEntityException</code> <p>When <code>check_blocking</code> is <code>True</code> and there is a blocking entity at <code>(x, y)</code>.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.add_entity","title":"add_entity  <code>method</code>","text":"<pre><code>def add_entity(self, entity, x=-1, y=-1, *, check_blocking=True):\n</code></pre> <p>Method to add an entity at the location <code>(x, y)</code>.</p> <p>When <code>check_blocking</code> is <code>True</code>, the method only adds the entity if there is no blocking entity at the location. Setting it to <code>False</code> is useful for adding consumable items that can exist at the location even if there is a blocking entity.</p> Parameters Name Type Description Default <code>entity</code> <code>Entity</code> <p>Entity to be added.</p> required <code>x</code> <code>int</code> <p>x-coordinate of the location where the entity should be added.</p> <code>-1</code> <code>y</code> <code>int</code> <p>x-coordinate of the location where the entity should be added.</p> <code>-1</code> <code>check_blocking</code> <code>bool</code> <p>Indicates if a check for a blocking entity should be performed.</p> <code>True</code> Raises Type Description <code>IndexError</code> <p>If <code>(x, y)</code> is out of bounds or the tile at <code>(x, y)</code> is not walkable.</p> <code>CollisionWithEntityException</code> <p>When <code>check_blocking</code> is <code>True</code> and there is a blocking entity at <code>(x, y)</code>.</p>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.remove_entity","title":"remove_entity  <code>method</code>","text":"<pre><code>def remove_entity(self, entity):\n</code></pre> <p>Method to remove an entity from the map.</p> Parameters Name Type Description Default <code>entity</code> <code>Entity</code> <p>Entity to be removed.</p> required"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.get_names_at_location","title":"get_names_at_location  <code>method</code>","text":"<pre><code>def get_names_at_location(self, x, y):\n</code></pre> <p>Method to obtain the names of the entities at location <code>(x, y)</code>.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x-coordinate of the location.</p> required <code>y</code> <code>int</code> <p>y-coordinate of the location.</p> required Returns Type Description <code>str</code> <p>Comma-separated string with the names.</p> <p>Examples:</p> <p>No entities:</p> <pre><code>&gt;&gt;&gt; from yarl.map import GameMap\n&gt;&gt;&gt; game_map = GameMap(width=10, height=10)\n&gt;&gt;&gt; game_map.get_names_at_location(x=0, y=0)\n''\n</code></pre> <p>Single entity:</p> <pre><code>&gt;&gt;&gt; from yarl.entity import Entity\n&gt;&gt;&gt; from yarl.map import GameMap\n&gt;&gt;&gt; game_map = GameMap(width=10, height=10)\n&gt;&gt;&gt; game_map.update_fov(pov=(0, 0))\n&gt;&gt;&gt; e1 = Entity(name=\"e1\")\n&gt;&gt;&gt; game_map.add_entity(entity=e1, x=0, y=0)\n&gt;&gt;&gt; game_map.get_names_at_location(x=0, y=0)\n'E1'\n</code></pre> <p>Multiple entities:</p> <pre><code>&gt;&gt;&gt; from yarl.entity import Entity\n&gt;&gt;&gt; from yarl.map import GameMap\n&gt;&gt;&gt; game_map = GameMap(width=10, height=10)\n&gt;&gt;&gt; game_map.update_fov(pov=(0, 0))\n&gt;&gt;&gt; for i in range(5):\n...     e = Entity(name=f\"e{i}\")\n...     game_map.add_entity(entity=e, x=0, y=0)\n...\n&gt;&gt;&gt; game_map.get_names_at_location(x=0, y=0)\n'E0, E2, E1, E3, E4'\n</code></pre>"},{"location":"reference/yarl/map/gamemap/#yarl.map.gamemap.GameMap.render","title":"render  <code>method</code>","text":"<pre><code>def render(self, console):\n</code></pre> <p>Method to render the tiles and entities of the game map to console.</p> Parameters Name Type Description Default <code>console</code> <code>Console</code> <p>Console to render to.</p> required"},{"location":"reference/yarl/map/gameworld/","title":"Gameworld","text":"<p>This module defines the class that will be used to handle map generation by floor.</p> <p>The class is a thin wrapper around <code>MapGenerator</code>.</p>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld","title":"GameWorld  <code>class</code>","text":"<pre><code>def __init__(self, map_width, map_height, room_min_size=5, current_floor=0):\n</code></pre> <p>Class to handle floor-based map generation.</p> Attributes Name Type Description <code>generator</code> <code>MapGenerator</code> <p>Generator instance being used to generate maps.</p> <code>current_floor</code> <code>int</code> <p>Current floor number for which map has been generated.</p> Parameters Name Type Description Default <code>map_width</code> <code>int</code> <p>Width of the map to be generated.</p> required <code>map_height</code> <code>int</code> <p>Height of the map to be generated.</p> required <code>room_min_size</code> <code>int</code> <p>Minimum size of each room in the map.</p> <code>5</code> <code>current_floor</code> <code>int</code> <p>Floor to start generating from. This is useful to increase difficulty from the very first map.</p> <code>0</code>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.enemies_floor_counts","title":"enemies_floor_counts  <code>writable</code> <code>property</code>","text":"<pre><code>enemies_floor_counts: list[tuple[int, int]]\n</code></pre> <p>Maximum number of items per room by floor.</p> <p>See <code>GameWorld.get_max_entities_by_floor()</code> for more details.</p> Default <pre><code>[(1, 2), (4, 3), (6, 5)]\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.items_floor_counts","title":"items_floor_counts  <code>writable</code> <code>property</code>","text":"<pre><code>items_floor_counts: list[tuple[int, int]]\n</code></pre> <p>Maximum number of items per room by floor.</p> <p>See <code>GameWorld.get_max_entities_by_floor()</code> for more details.</p> Default <pre><code>[(1, 1), (4, 2)]\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.enemies_floor_factories","title":"enemies_floor_factories  <code>writable</code> <code>property</code>","text":"<pre><code>enemies_floor_factories: dict[int, dict[ActiveEntity, float]]\n</code></pre> <p>Probability distributions to be used for sampling enemies by floor.</p> <p>See <code>GameWorld.get_factory_by_floor()</code> for more details.</p> Default <pre><code>from yarl.factories import ENEMIEs\n{\n0: {ENEMIES[\"orc\"]: 0.43},\n3: {ENEMIES[\"orc\"]: 0.23, ENEMIES[\"troll\"]: 0.08},\n5: {ENEMIES[\"troll\"]: 0.15},\n7: {ENEMIES[\"troll\"]: 0.32},\n}\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.items_floor_factories","title":"items_floor_factories  <code>writable</code> <code>property</code>","text":"<pre><code>items_floor_factories: dict[int, dict[Item, float]]\n</code></pre> <p>Probability distributions to be used for sampling items by floor.</p> <p>See <code>GameWorld.get_factory_by_floor()</code> for more details.</p> Default <pre><code>from yarl.factories import CONSUMABLE_ITEMS, EQUIPPABLE_ITEMS\n{\n0: {\nCONSUMABLE_ITEMS[\"healing_potion\"]: 0.26,\nEQUIPPABLE_ITEMS[\"dagger\"]: 0.04,\nEQUIPPABLE_ITEMS[\"leather_armor\"]: 0.11,\n},\n2: {CONSUMABLE_ITEMS[\"confusion_spell\"]: 0.07},\n4: {\nCONSUMABLE_ITEMS[\"lightning_scroll\"]: 0.18,\nEQUIPPABLE_ITEMS[\"sword\"]: 0.04,\n},\n6: {\nCONSUMABLE_ITEMS[\"fireball_scroll\"]: 0.18,\nEQUIPPABLE_ITEMS[\"steel_armor\"]: 0.11,\n},\n}\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.get_max_entities_by_floor","title":"get_max_entities_by_floor  <code>method</code>","text":"<pre><code>def get_max_entities_by_floor(self, floor_counts):\n</code></pre> <p>Method to obtain the maximum number of items, enemies, etc, per room for the current floor.</p> Parameters Name Type Description Default <code>floor_counts</code> <code>list[tuple[int, int]]</code> <p>Maximum number of items, enemies, etc, per room by floor.</p> <p>The first <code>int</code> in each tuple represents the floor and the second <code>int</code> represents the maximum number of items on that floor.</p> <p>Given the current floor, the maximum number of items per room for the floor is the second <code>int</code> of the tuple with the largest first <code>int</code> less than or equal to the floor. It there is no such <code>int</code>, it is set to 0.</p> required Returns Type Description <code>int</code> <p>Maximum number of items, enemies, etc, per room for the current floor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10)\n&gt;&gt;&gt; floor_counts = game_world.enemies_floor_counts\n&gt;&gt;&gt; game_world.get_max_entities_by_floor(floor_counts=floor_counts)\n0\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=1)\n&gt;&gt;&gt; floor_counts = game_world.enemies_floor_counts\n&gt;&gt;&gt; game_world.get_max_entities_by_floor(floor_counts=floor_counts)\n2\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=3)\n&gt;&gt;&gt; floor_counts = game_world.enemies_floor_counts\n&gt;&gt;&gt; game_world.get_max_entities_by_floor(floor_counts=floor_counts)\n2\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=4)\n&gt;&gt;&gt; floor_counts = game_world.enemies_floor_counts\n&gt;&gt;&gt; game_world.get_max_entities_by_floor(floor_counts=floor_counts)\n3\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.get_factory_by_floor","title":"get_factory_by_floor  <code>method</code>","text":"<pre><code>def get_factory_by_floor(self, floor_factories):\n</code></pre> <p>Generic method to obtain the probability distribution of enemies, items, etc, for the current floor.</p> Parameters Name Type Description Default <code>floor_factories</code> <code>dict[int, dict[T, float]]</code> <p>Probability distributions available for the floors.</p> <p>Each key in the outer dictionary is the floor number, and value is a dictionary where each key is the item and the value is the probability that it\u2019s added to the map.</p> <p>It has a cascading effect. For example, if the value is <code>{0: {&lt;e1&gt;: 0.43}, 3: {&lt;e2&gt;: 0.08}, 5: {&lt;e2&gt;: 0.15, &lt;e3&gt;: 0.2}, 7: {&lt;e3&gt;: 0.32}}</code>, then:</p> <ul> <li> <p>Floors 1 and 2 will have entity <code>&lt;e1&gt;</code> with probability 0.43</p> </li> <li> <p>Floors 3 and 4 will have entities <code>&lt;e1&gt;</code> and     ` with probability 0.43 and 0.08 <li> <p>Floors 5 and 6 will have entities <code>&lt;e1&gt;</code> <code>&lt;e2&gt;</code> and <code>&lt;e3&gt;</code> with     probability 0.43, 0.15 and 0.2.</p> </li> <li> <p>Floors 7 and above will have entities <code>&lt;e1&gt;</code>, <code>&lt;e2&gt;</code> and <code>&lt;e3&gt;</code>     with probability 0.43, 0.15 and 0.32.</p> </li> <p>The cascading effect allows selectively providing the probability distributions.</p> required Returns Type Description <code>dict[T, float]</code> <p>Probability distribution that will be used for the floor to sample enemies, items, etc, for each room in the map.</p> <p>Examples:</p> <p>Example 1: Enemies</p> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10)\n&gt;&gt;&gt; floor_factories = game_world.enemies_floor_factories\n&gt;&gt;&gt; game_world.get_factory_by_floor(floor_factories=floor_factories)\n{ActiveEntity(x=0, y=0, name='Orc', char='O'): 0.43}\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=4)\n&gt;&gt;&gt; floor_factories = game_world.enemies_floor_factories\n&gt;&gt;&gt; game_world.get_factory_by_floor(floor_factories=floor_factories)\n{\n    ActiveEntity(x=0, y=0, name=\"Orc\", char=\"O\"): 0.23,\n    ActiveEntity(x=0, y=0, name=\"Troll\", char=\"T\"): 0.08,\n}\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=7)\n&gt;&gt;&gt; floor_factories = game_world.enemies_floor_factories\n&gt;&gt;&gt; game_world.get_factory_by_floor(floor_factories=floor_factories)\n{\n    ActiveEntity(x=0, y=0, name=\"Orc\", char=\"O\"): 0.23,\n    ActiveEntity(x=0, y=0, name=\"Troll\", char=\"T\"): 0.32,\n}\n</code></pre> <p>Example 2: Items</p> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10)\n&gt;&gt;&gt; floor_factories = game_world.items_floor_factories\n&gt;&gt;&gt; game_world.get_factory_by_floor(floor_factories=floor_factories)\n{Item(x=0, y=0, name='Healing Potion', char='!'): 0.26}\n</code></pre> <pre><code>&gt;&gt;&gt; from yarl.map import GameWorld\n&gt;&gt;&gt; game_world = GameWorld(map_width=10, map_height=10, current_floor=4)\n&gt;&gt;&gt; floor_factories = game_world.items_floor_factories\n&gt;&gt;&gt; game_world.get_factory_by_floor(floor_factories=floor_factories)\n{\n    Item(x=0, y=0, name=\"Healing Potion\", char=\"!\"): 0.26,\n    Item(x=0, y=0, name=\"Confusion Spell\", char=\"~\"): 0.07,\n    Item(x=0, y=0, name=\"Dagger\", char=\"/\"): 0.04,\n    Item(x=0, y=0, name=\"Leather Armor\", char=\"[\"): 0.11,\n    Item(x=0, y=0, name=\"Lightning Scroll\", char=\"~\"): 0.18,\n    Item(x=0, y=0, name=\"Sword\", char=\"/\"): 0.04,\n}\n</code></pre>"},{"location":"reference/yarl/map/gameworld/#yarl.map.gameworld.GameWorld.generate_floor","title":"generate_floor  <code>method</code>","text":"<pre><code>def generate_floor(self, player=None):\n</code></pre> <p>Method to generate the map for the next floor and optionally place the player.</p> Parameters Name Type Description Default <code>player</code> <code>ActiveEntity | None</code> <p>Player to place.</p> <code>None</code> Returns Type Description <code>GameMap</code> <p>Generated game map.</p>"},{"location":"reference/yarl/map/mapgen/","title":"Mapgen","text":"<p>Module to handle map generation using BSP.</p> <p>For details on BSP, see Binary Space Partitioning.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.RectangularRoom","title":"RectangularRoom  <code>class</code>","text":"<pre><code>def __init__(self, x, y, width, height):\n</code></pre> <p>Class to represent a rectangular room.</p> Attributes Name Type Description <code>x1</code> <code>int</code> <p>x-coordinate of one corner of the room.</p> <code>y1</code> <code>int</code> <p>y-coordinate of one corner of the room.</p> <code>x2</code> <code>int</code> <p>x-coordinate of second corner of the room.</p> <code>y2</code> <code>int</code> <p>y-coordinate of second corner of the room.</p> <code>inner</code> <code>tuple[slice, slice]</code> <p>Corner coordinates of the inner area of the room.</p> <code>center</code> <code>tuple[int, int]</code> <p>Coordinates of the center of the room.</p> Parameters Name Type Description Default <code>x</code> <code>int</code> <p>x coordinate of the room.</p> required <code>y</code> <code>int</code> <p>y coordinate of the room.</p> required <code>width</code> <code>int</code> <p>Width of the room.</p> required <code>height</code> <code>int</code> <p>Height of the room.</p> required"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.RectangularRoom.center","title":"center  <code>property</code>","text":"<pre><code>center: tuple[int, int]\n</code></pre> <p>Tuple of ints that represents the corner coordinates of the room\u2019s center.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.RectangularRoom.inner","title":"inner  <code>property</code>","text":"<pre><code>inner: tuple[slice, slice]\n</code></pre> <p>Tuple of slices that represents the coordinates of the room\u2019s inner area.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.RectangularRoom.fromnode","title":"fromnode  <code>classmethod</code>","text":"<pre><code>def fromnode(cls, node):\n</code></pre> <p>Method to create a RectangularRoom object from a <code>BSP</code> node.</p> Parameters Name Type Description Default <code>node</code> <code>BSP</code> <p>Node from which the room should be created.</p> required Returns Type Description <code>RectangularRoom</code> <p>Room created using the <code>BSP</code> node.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.RectangularRoom.intersects","title":"intersects  <code>method</code>","text":"<pre><code>def intersects(self, other):\n</code></pre> <p>Method to check if the given room intersects the room.</p> Parameters Name Type Description Default <code>other</code> <code>RectangularRoom</code> <p>Room which needs to be checked for intersection.</p> required Returns Type Description <code>bool</code> <p><code>True</code> if the rooms intersect and <code>False</code> otherwise.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator","title":"MapGenerator  <code>class</code>","text":"<pre><code>def __init__(self, map_width, map_height, room_min_size=5, depth=10, *, full_rooms=False):\n</code></pre> <p>Class to handle map generation via BSP.</p> Attributes Name Type Description <code>room_min_size</code> <code>int</code> <p>Minimum size of the generated rooms.</p> <code>map_width</code> <code>int</code> <p>Width of the map to be generated.</p> <code>map_height</code> <code>int</code> <p>Height of the map to be generated.</p> <code>depth</code> <code>int</code> <p>Depth of the BSP tree.</p> <code>full_rooms</code> <code>bool</code> <p>Indicates whether rooms should use the dimensions of the nodes in the BSP tree (True) or have random dimensions based on the dimensions of the node.</p> <code>rooms</code> <code>list[RectangularRoom]</code> <p>All the rooms in the map.</p> <code>game_map</code> <code>GameMap</code> <p>Generated map.</p> Parameters Name Type Description Default <code>map_width</code> <code>int</code> <p>Width of the map that will be generated.</p> required <code>map_height</code> <code>int</code> <p>Height of the map that will be generated.</p> required <code>room_min_size</code> <code>int</code> <p>Minimum size of the rooms that should be generated. Defaults to 5.</p> <code>5</code> <code>depth</code> <code>int</code> <p>Depth of the BSP tree. Defaults to 10.</p> <code>10</code> <code>full_rooms</code> <code>bool</code> <p>Indicates whether rooms should use the dimensions of the BSP nodes they are created from (<code>True</code>) or have random sizes based on those dimensions (<code>False</code>). More interesting maps are generated when set to <code>False</code>. Defaults to <code>False</code>.</p> <code>False</code>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.create_bsp_tree","title":"create_bsp_tree  <code>method</code>","text":"<pre><code>def create_bsp_tree(self):\n</code></pre> <p>Method to create a BSP tree and obtain its root node.</p> Returns Type Description <code>BSP</code> <p>Root node of the generated BSP tree.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.traverse_bsp","title":"traverse_bsp  <code>method</code>","text":"<pre><code>def traverse_bsp(self, node):\n</code></pre> <p>Method to recursively traverse a BSP tree, and create and connect rooms.</p> Parameters Name Type Description Default <code>node</code> <code>BSP</code> <p>Current BSP node in the recursion.</p> required"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.create_room","title":"create_room  <code>method</code>","text":"<pre><code>def create_room(self, node):\n</code></pre> <p>Method to create a room and add it to the map from the given <code>BSP</code> node. It also adds the room to the rooms attribute of the class and returns the room object.</p> Parameters Name Type Description Default <code>node</code> <code>BSP</code> <p><code>BSP</code> node from which the room should be created.</p> required Returns Type Description <code>RectangularRoom</code> <p>Room created using the <code>BSP</code> node.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.tunnel_coordinates","title":"tunnel_coordinates  <code>method</code>","text":"<pre><code>def tunnel_coordinates(self, start, end):\n</code></pre> <p>Method to obtain the coordinates required to connect two points. It uses a Bresenham line to connect the two points. The method is random since it randomly decides whether to connect the points horizontally or vertically.</p> Parameters Name Type Description Default <code>start</code> <code>tuple[int, int]</code> <p>First point to connect.</p> required <code>end</code> <code>tuple[int, int]</code> <p>Second point to connect.</p> required Returns Type Description <code>Iterator[tuple[int, int]]</code> <p>Coordinates of the tunnel.</p>"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.connect_rooms","title":"connect_rooms  <code>method</code>","text":"<pre><code>def connect_rooms(self, node1, node2):\n</code></pre> <p>Method to connect the two rooms represented by the given BSP nodes.</p> Parameters Name Type Description Default <code>node1</code> <code>BSP</code> <p>First node to connect.</p> required <code>node2</code> <code>BSP</code> <p>Second node to connect.</p> required"},{"location":"reference/yarl/map/mapgen/#yarl.map.mapgen.MapGenerator.generate_map","title":"generate_map  <code>method</code>","text":"<pre><code>def generate_map(self, player=None, enemy_factory=None, max_enemies_per_room=2, item_factory=None, max_items_per_room=2):\n</code></pre> <p>Method to generate a map using BSP and optionally place the player at the center of a random room in the generated map.</p> Parameters Name Type Description Default <code>player</code> <code>Entity | None</code> <p>Player to be placed on the map. Defaults to None.</p> <code>None</code> <code>max_enemies_per_room</code> <code>int</code> <p>Maximum number of enemies to spawn per room.</p> <code>2</code> <code>max_items_per_room</code> <code>int</code> <p>Maximum number of consumable items to spawn per room.</p> <code>2</code> <code>enemy_factory</code> <code>dict[ActiveEntity, float] | None</code> <p>Population enemies will be sampled from. Each key is the entity and the value is the probability. If set to <code>None</code>, it falls back to using <code>ENEMY_FACTORY</code>.</p> <code>None</code> <code>item_factory</code> <code>dict[Item, float] | None</code> <p>Population items will be sampled from. Each key is the item and the value is the probability. If set to <code>None</code>, it falls back to using <code>ITEM_FACTORY</code>.</p> <code>None</code> Returns Type Description <code>GameMap</code> <p>Generated game map.</p> <p>Examples:</p> <p>Creating a map of width 10 and height 10:</p> <pre><code>&gt;&gt;&gt; from yarl.mapgen import MapGenerator\n&gt;&gt;&gt; generator = MapGenerator(map_width=100, map_height=45)\n&gt;&gt;&gt; game_map = generator.generate_map()\n</code></pre> <p>To control the number of rooms that are generated, change the <code>depth</code>:</p> <pre><code>&gt;&gt;&gt; from yarl.mapgen import MapGenerator\n&gt;&gt;&gt; generator = MapGenerator(map_width=100, map_height=45, depth=5)\n&gt;&gt;&gt; game_map = generator.generate_map()\n</code></pre>"}]}